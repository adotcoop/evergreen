{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Evergreen \u00b6 Evergreen is a PowerShell module that returns the latest version and download URLs for a set of common Windows applications. The module consists of simple functions to use in scripts when performing several tasks including: Retrieve the latest version of an application to compare against a version already installed or downloaded Return the URL for the latest version of the application to download it for local installation or deployment to target machines Evergreen is intended for use in solutions used to automate software deployments. These solutions could be: Image creation with Hashicorp Packer - images can be created with the latest version of a set of applications Import applications into Microsoft Endpoint Manager - keep Configuration Manager or Microsoft Intune up to date with the latest versions of applications Create a library of application installers - by regularly running Evergreen functions, you can retrieve and download the current version of an application and store it in an application directory structure for later use Submitting manifests to Winget or Chocolatey or similar - Evergreen can return an object with a version number and download URL that can be used to construct manifests for the most recent versions Functions \u00b6 Primary functions in Evergreen are: Get-EvergreenApp - returns details of the latest release of an application including the version number and download URL Save-EvergreenApp - simplifies downloading application URLs returned from Get-EvergreenApp Find-EvergreenApp - lists applications supported by the module Why \u00b6 There are several community and commercial products that manage application deployment and updates already. This module isn't intended to compete against those. In fact, they can be complementary - for example, Evergreen can be used with the Chocolatey Automatic Package Updater Module to find the latest version of an application and then creating and submitting a Chocolatey package, or it can be used to create a Windows Package Manager manifest (see a sample script here: New-WinGetManifest.ps1 ). Evergreen's focus is on integration for PowerShell scripts to provide product version numbers and download URLs. Ideal for use with the Microsoft Deployment Toolkit or Microsoft Endpoint Configuration Manager for operating system deployment, creating applications packages in Microsoft Intune, or with Packer to create evergreen machine images on-premises, in Azure, AWS, or other cloud platforms","title":"Introduction"},{"location":"#evergreen","text":"Evergreen is a PowerShell module that returns the latest version and download URLs for a set of common Windows applications. The module consists of simple functions to use in scripts when performing several tasks including: Retrieve the latest version of an application to compare against a version already installed or downloaded Return the URL for the latest version of the application to download it for local installation or deployment to target machines Evergreen is intended for use in solutions used to automate software deployments. These solutions could be: Image creation with Hashicorp Packer - images can be created with the latest version of a set of applications Import applications into Microsoft Endpoint Manager - keep Configuration Manager or Microsoft Intune up to date with the latest versions of applications Create a library of application installers - by regularly running Evergreen functions, you can retrieve and download the current version of an application and store it in an application directory structure for later use Submitting manifests to Winget or Chocolatey or similar - Evergreen can return an object with a version number and download URL that can be used to construct manifests for the most recent versions","title":"Evergreen"},{"location":"#functions","text":"Primary functions in Evergreen are: Get-EvergreenApp - returns details of the latest release of an application including the version number and download URL Save-EvergreenApp - simplifies downloading application URLs returned from Get-EvergreenApp Find-EvergreenApp - lists applications supported by the module","title":"Functions"},{"location":"#why","text":"There are several community and commercial products that manage application deployment and updates already. This module isn't intended to compete against those. In fact, they can be complementary - for example, Evergreen can be used with the Chocolatey Automatic Package Updater Module to find the latest version of an application and then creating and submitting a Chocolatey package, or it can be used to create a Windows Package Manager manifest (see a sample script here: New-WinGetManifest.ps1 ). Evergreen's focus is on integration for PowerShell scripts to provide product version numbers and download URLs. Ideal for use with the Microsoft Deployment Toolkit or Microsoft Endpoint Configuration Manager for operating system deployment, creating applications packages in Microsoft Intune, or with Packer to create evergreen machine images on-premises, in Azure, AWS, or other cloud platforms","title":"Why"},{"location":"changelog/","text":"Change log \u00b6 2106.395 \u00b6 Adds AkeoRufus #179 , BlenderLauncher #178 Updates MicrosoftFSLogixApps to return both the production and preview releases #176 Updates Veracrypt to return the complete version number (e.g. 1.24-Update7 ) #166 BREAKING CHANGES: Adds the Production and Preview channels to MicrosoftFSLogixApps that will require filtering with Where-Object 2105.388 \u00b6 Update VMwareHorizonClient with additional filtering to select the latest version correctly to address #161 Add internal function Save-File to download a URL with Invoke-WebRequest and return the downloaded file path Update internal application functions for consistent use of Resolve-SystemNetWebRequest to address #174 - Get-FoxitReader , Get-LogMeInGoToOpener , Get-MicrosoftSsms , Get-MicrosoftVisualStudio , Get-RingCentral , Get-Slack Update references to documentation site https://stealthpuppy.com/Evergreen to https://stealthpuppy.com/evergreen 2105.383 \u00b6 Adds CiscoWebEx ( #141 ), VeraCrypt ( #160 ), KarakunOpenWebStart ( #163 ) Updates MicrosoftWvdRemoteDesktop with the Preview release and fixes source URLs for the public release Adds ARM64 architecture to MicrosoftTeams #162 Adds MSI file type to Wireshark Updates internal function Get-SourceForgeRepoRelease with improvements to find releases and download URIs 2105.371 \u00b6 Adds Audacity , Wireshark ( #153 ), LogMeInGoToMeeting ( #152 ), LogMeInGoToOpener Updates AdobeAcrobat to include Reader updates for 2015 , 2017 , 2020 Updates AdobeAcrobat to include 64-bit updates for Reader and Acrobat DC BREAKING CHANGES Adds the Architecture property to AdobeAcrobat 2105.366 \u00b6 Fixes an issue with Remove-Variable in Save-EvergreenApp Fix #149 Updates Save-EvergreenApp to skip downloading a file if it already exists and adds support for -Force Updates help for Save-EvergreenApp Adds nb-NO language support to MozillaFirefox Fix #146 2105.363 \u00b6 Adds ImageGlass , MicrosoftAzureStorageExplorer , Nomacs , Notable , OBSStudio Updates URL used by TeamViewer to return the current version #147 Updates Save-EvergreenApp to output the result of Get-ChildItem as the output to the pipeline Updates module to use external help MAML-based help with platyPS to make updating help content easier General code improvements 2104.355 \u00b6 Changes FoxitReader to return MSI installers instead of EXEs. Removes Elex, Portuguese (Portugal), and Turkish language support from this application because the installers returned are out of date. Adds the following languages to AdobeAcrobatReaderDC : Swedish, Basque, Catalan, Croatian, Czech, Hungarian, Polish, Romanian, Russian, Slovakian, Slovenian, Turkish, Ukrainian Adds a known issues list to the documentation: https://stealthpuppy.com/evergreen/knownissues.html 2104.348 \u00b6 Adds the Consumer release (to the existing Enterprise release) and Dev, Beta channels, and ARM64 architecture to MicrosoftEdge Adds 64-bit architecture to MicrosoftOneDrive Adds BeekeeperStudio , VMwareHorizonClient , AdoptOpenJDK 8 , AdoptOpenJDK 11 , AdoptOpenJDK 16 Modifies Get-EvergreenApp to load internal per-application functions on demand, instead of loading all of these function into memory at module import Updates Get-CitrixRssFeed to use Invoke-RestMethod to simplify handling of the XML feed Updates various functions to Throw more consistently when encountering errors General code improvements 2104.337 \u00b6 BREAKING CHANGE : This version removes the Get- function for each application and introduces Get-EvergreenApp . See the docs site on how to use the new functions https://stealthpuppy.com/evergreen/ Adds Get-EvergreenApp , Find-EvergreenApp and Save-EvergreenApp Adds file type to SourceForge applications Re-instates ControlUpAgent and ControlUpConsole Fixes the LTS release in Microsoft.NET Fixes localised date format for Gimp , GoogleChrome , MicrosoftEdge , MicrosoftFSLogixApps , MicrosoftSsms , FoxitReader Migrates tests to Pester 5 Adds additional Pester tests for private functions General code optimisations and fixes 2103.305 \u00b6 Fixes an issue with Get-AdobeAcrobat to ensure that Track property has the correct value (DC, 2020, etc.) and the Language property (Neutral, Multi) #130 2103.303 \u00b6 Adds Get-NETworkManager , Get-Anki Updates Get-AdobeAcrobat to include updates for Adobe Acrobat Reader DC. This function now returns updates for both Acrobat Pro and Reader Retrieve the installers for Adobe Acrobat Reader DC with Get-AdobeAcrobatReaderDC and any available updates with Get-AdobeAcrobat Temporarily disables Get-ControlUpAgent and Get-ControlUpConsole 2103.298 \u00b6 Adds Get-MicrosoftAzureDataStudio , Get-ControlUpConsole Updates Get-ControlUpAgent to use the published JSON at https://www.controlup.com/latest-agent-console/ - the last vestiges of any screen scraping code have been swept away Updates Get-AdobeAcrobatReaderDC to account for the new 64-bit version of Reader to add #121 . Filter with Where-Object to return the required version, language and architecture BREAKING CHANGES Adds Architecture property and removes Type property from the output of Get-AdobeAcrobatReaderDC Removes the Adobe Acrobat Reader DC updaters from Get-AdobeAcrobatReaderDC as there is no consistent automated method to determine whether an update is required or optional Changes the output of Get-ControlUpAgent - the values in the Framework property have changed and the function only returns the most recent agent version 2102.291 \u00b6 Renames function Get-AdobeAcrobatProDC to Get-AdobeAcrobat and includes support for returning updates for Adobe Acrobat Pro/Standard DC, 2020, 2017, and 2015. Addresses #114 Alias Get-AdobeAcrobatProDC included for backward compatibility Adds Preview ring to Get-MicrosoftTeams Updates function comment-based help and corrects spelling across several functions BREAKING CHANGES Adds Track property to Get-AdobeAcrobat with values of DC , 2020 , 2017 , 2015 - filter with Where-Object Adds Ring property to Get-MicrosoftTeams for General (i.e., current / production ring) and Preview rings - filter with Where-Object 2102.286 \u00b6 Adds the ARM architecture to Get-MicrosoftVisualStudioCode Updates Get-MicrosoftWvdRemoteDesktop to output the URI property value in the format https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4MntQ instead of the original fwlink source URL (e.g. https://go.microsoft.com/fwlink/?linkid=2068602 ) Updates the following functions to use Invoke-RestMethod (via Invoke-RestMethodWrapper ) instead of Invoke-WebRequest to simplify code and fix an issue where some functions where returning Version as a PSObject instead of System.String ( #109 ) Get-AtlassianBitbucket , Get-Cyberduck , Get-FileZilla , Get-Fork , Get-RingCentral , Get-ScooterBeyondCompare , Get-SumatraPDFReader , Get-VideoLanVlcPlayer Updates module ReleaseNotes location to: https://stealthpuppy.com/evergreen/changelog.html 2101.281 \u00b6 Renames Get-MicrosoftOffice , to Get-Microsoft365Apps to align with product name. The alias Get-MicrosoftOffice is included for backward compatibility Adds the Monthly Enterprise channel to Get-Microsoft365Apps output. See #107 Adds private function Invoke-RestMethodWrapper to enable normalisation across public functions and PowerShell/Windows PowerShell that use Invoke-RestMethod Updates private function Get-GitHubRepoRelease to use Invoke-RestMethodWrapper Updates several public functions to use Invoke-RestMethodWrapper instead of the previous method of Invoke-WebRequest | ConvertTo-Json - Get-1Password , Get-CitrixVMTools , Get-FoxitReader , Get-GoogleChrome , Get-Microsoft365Apps , Get-MicrosoftEdge , Get-MicrosoftTeams , Get-MicrosoftVisualStudioCode , Get-MozillaFirefox , Get-MozillaThunderbird Updates public functions that used Invoke-RestMethod to use Invoke-RestMethodWrapper instead - Get-Gimp , Get-MicrosoftPowerShell , Get-MicrosoftVisualStudio Renames private function Invoke-WebContent to Invoke-WebRequestWrapper and makes general improvements to the handling of Invoke-WebRequest Renames private function ConvertFrom-SourceForgeReleasesJson to Get-SourceForgeRepoRelease Updates and optimises this function to make use of Invoke-RestMethodWrapper so that it can query a SourceForge repository and return the required output in a single function Simplifies code in public functions that return SourceForge releases - Get-7zip , Get-KeePass , Get-PDFForgePDFCreator , Get-ProjectLibre , Get-WinMerge , Get-WinSCP Renames private functions for more descriptive function names (these resolve HTTP 301/302 return codes): Resolve-Uri to Resolve-SystemNetWebRequest Resolve-RedirectedUri to Resolve-InvokeWebRequest BREAKING CHANGES Removes parameter from several functions (below) to simplify existing functions and support a move to a single Get-EvergreenApp function Removes the -Channel and -Platform parameters from Get-MicrosoftVisualStudioCode . Filter output using Where-Object on the Channel and Platform parameters on the function output Removes the -Language parameter from Get-MozillaFirefox and Get-MozillaThunderbird . Filter output using Where-Object { $_.Language -eq \"en-US\" } or similar. These functions will return the following languages (for additional languages, please open an issue on the project): en-US , en-GB , en-CA , es-ES , sv-SE , pt-BR , pt-PT , de , fr , it , ja , nl , zh-CN , zh-TW , ar , hi-IN , ru 2101.275 \u00b6 Adds Get-AtlassianBitbucket , Get-TelegramDesktop , Get-Gimp , Get-BitwardenDesktop , Get-MicrosoftBicep Updates Get-MicrosoftPowerShell to return both the Stable and LTS releases of PowerShell BREAKING CHANGES Update output of Get-MicrosoftOneDrive - changes property Sha256Hash to Sha256 to be consistent with other functions Adds a Release property to the output of Get-MicrosoftPowerShell - use Where-Object to filter on Stable or LTS 2101.263 \u00b6 Adds Get-AdobeBrackets , Get-Fork , Get-MicrosoftVisualStudio , Get-VercelHyper Updates manifest for MicrosoftWvdRemoteDesktop to ensure evergreen source URLs used for resolving downloads Updates manifest for MicrosoftVisualStudioCode 2101.256 \u00b6 Adds Get-Terminals , Get-PeaZipPeaZip , Get-Slack , Get-MicrosoftWindowsPackageManagerClient , Get-KeePassXCTeamKeePassXC , Get-SumatraPDFReader Renames Get-Atom , to Get-GitHubAtom to better align with vendor name. The alias Get-Atom is included for backward compatibility Fixes an issue with Get-AdobeAcrobatReaderDC - Adobe doesn't use HTTPS with their download locations yet. See #99 Updates Get-AdobeAcrobatReaderDC to simplify code and better align manifest with standard structure 2101.249 \u00b6 Adds Get-MicrosoftWvdRemoteDesktop , Get-MozillaThunderbird , Get-ProjectLibre , Get-RingCentral , Get-RCoreTeamRforWindows , Get-StefansToolsgregpWin Renames Get-MicrosoftPowerShellCore to Get-MicrosoftPowerShell - PowerShell Core was renamed to PowerShell with the release of PowerShell 7.0. The alias Get-MicrosoftPowerShellCore is included for backward compatibility Fixes an issue with Get-GitHubRelease that ignored anything passed to the -Uri parameter Adds the MSIX format to the output of Get-MicrosoftOneDrive - filter output with the Type property (I'm not really sure how useful MSIX format for the OneDrive client is right now though...) Adds the VboxGuestAdditions ISO to the output of Get-OracleVirtualBox - filter output with the Type property Refactors Get-Zoom to simplify function code and improve output Updates version output for Get-MicrosoftWvdRtcService and Get-MicrosoftWvdInfraAgent Updates manifest for a number of functions to better align with an updated standard structure (see Manifests/Template.json ) BREAKING CHANGES: Output of Get-MicrosoftOneDrive has changed - Platform has been removed and Type has been added Output of Get-OracleVirtualBox has changed - Type property has been added Output of Get-Zoom has changed - filter output with the Platform and Type properties 2012.242 \u00b6 Adds Get-AdobeAcrobatProDC , Get-TelerikFiddlerEverywhere , Get-1Password Adds Windows Installer downloads output to Get-FoxitReader Updates Get-MicrosoftSsms to query an evergreen update URL to gather new versions from the product releases feed NOTE: the version of SSMS in the releases feed is not the actual current release version - we can only work with what the feed returns; See #82 Updates Get-MicrosoftSsms to output all supported languages for downloads - filter output on the Language property Updates Get-MozillaFirefox to return both Exe and Msi versions of the Firefox installer Adds SHA256 hash property to output from Get-MicrosoftVisualStudioCode Fixes an issue with the URI output in Get-Cyberduck that was returning an additional / character Refactors private function to query the GitHub releases API ( Get-GitHubRepoRelease , replacing ConvertFrom-GitHubReleasesJson ) to use Invoke-RestMethod for simpler public functions used to return GitHub releases Updates the following functions to use Get-GitHubRepoRelease - Get-Atom , Get-AdoptOpenJdk , Get-BISF , Get-dnGrep , Get-GitForWindows , Get-GitHubRelease , Get-Greenshot , Get-Handbrake , Get-MicrosoftPowerShellCore , Get-MicrosoftPowerToys , Get-mRemoteNG , Get-NotepadPlusPlus , Get-OpenJDK , Get-OpenShellMenu , Get-ShareX , Get-Win32OpenSSH , Get-WixToolSet Updates manifest for a number of functions to better align with an updated standard structure (see Manifests/Template.json ) Updates private function ConvertTo-DateTime to better handle date/time format conversion. Still some improvements to be made here BREAKING CHANGES: Updates Get-OpenJDK to return only Msi releases and removes Debug, zip etc. On-going improvements - see #76 Removes Beta and Snapshots releases from Get-Cyberduck Removes Debug releases from Get-Greenshot Removes SafeMode releases from Get-Handbrake Removes Beta channel and ARM64 releases from Get-MicrosoftEdge Removes Zip format releases from Get-MicrosoftPowerShellCore Removes Symbols releases from Get-Win32OpenSSH 2012.225 \u00b6 Adds Get-Microsoft.NET (.NET 5.0 and .NET Core), Get-Win32OpenSSH , Get-MicrosoftPowerToys Updates Get-OpenJDK to return all releases. Further filtering will be added in the future per #76 Updates Get-MozillaFirefox to resolve download URIs for both EXE and MSI Firefox installers and updates output with additional properties ( Architecture , Channel and Type ). See #83 . Note: this introduces a breaking change - the -Platform switch has been removed, you will need to filter the output on the Architecture property Updates Get-AdobeAcrobatReader to return additional languages #84 . Note that Reader DC does not provide the latest version for all languages - it may be a better approach to use the MUI version of the Reader installer if your language is supported 2010.219 \u00b6 Update Get-FileZilla to fix invalid download URI returned from the FileZilla update feed. Fix #75 Update Get-Cyberduck to remove code that replaces // with / . Returns unfiltered URL from Cyberduck update feed. Fix #75 2009.218 \u00b6 Fix Get-FoxitReader with changes to download page in FoxitReader.json . Address #72 Fix Get-Zoom with changes to resolved URIs. Address #73 Update MicrosoftWvdRtcService.json to new version of the Microsoft Remote Desktop WebRTC Redirector Service Update Resolve-Uri with additional verbose output 2006.212 \u00b6 Renames Get-CitrixXenServerTools to Get-CitrixVMTools and adds Get-CitrixXenServerTools alias Updates Get-CitrixVMTools with new release URL for v7 updates and add v9 updates Updates install command lines for Get-CitrixVMTools Adds Get-AdoptOpenJDK - closes #69 2006.207 \u00b6 Fix path in downloads from apps hosted on Source Forge returned in ConvertFrom-SourceForgeReleasesJson.ps1 . Fixes #67 Update Get-MozillaFirefox to return Extended Support Release as well as Current Release. Address #61 Update manifests to address #57 #54 #53 #52 2006.203 \u00b6 Removes Size property from Get-FoxitReader because this isn't being gathered consistently for each download Updates version / releases feed for Get-MicrosoftSsms to ensure the current version is returned Updates the way private function ConvertFrom-SourceForgeReleasesJson returns available downloads from SourceForge Updates Get-7zip , Get-KeePass , Get-PDFForgePDFCreator and Get-WinMerge to support new approach to retrieving SourceForge downloads 2005.190 \u00b6 Adds Get-MicrosoftWvdBootLoader - Get the filename and download URL for the Microsoft Windows Virtual Desktop Remote Desktop Boot Loader Updates Get-FoxitReader to sort release versions correctly and return latest (v10.x) 2005.187 \u00b6 Adds Get-MicrosoftWvdRtcService - returns the version, filename and download for the Microsoft Remote Desktop WebRTC Redirector service for Windows Virtual Desktop 2005.183 \u00b6 Updates Get-VMwareTools to return the very latest version with updated download URL Adds Get-WixToolset 2005.176 \u00b6 Fixes an issue where Get-MicrosoftEdge was only returning ARM64 downloads Updates Get-MicrosoftEdge to only return downloads for the Enterprise ring (removed Consumer ring) Fixes an issue with Get-MicrosoftTeams where it was returning an incorrect download URL 2005.172 \u00b6 Updates Get-MicrosoftEdge to correctly return the latest version and policy files for the Enterprise ring Updates output for private function Resolve-Uri with addition properties Updates Get-FoxitReader , Get-MicrosoftFSLogixApps , and Get-MicrosoftSsms to use Resolve-Uri instead of Resolve-RedirectedUri for improved performance Updates Get-LibreOffice to retrieve latest version from the update API instead of page scraping Updates private function ConvertTo-DateTime with improvements in returning localised date (so the rest of us don't need to be stuck with US date formats) Aligns Get-NotepadPlusPlus with private function ConvertFrom-GitHubReleasesJson to return GitHub release data Fixes output in Get-VMwareTools to ensure correct version and download URL are returned Adds date to output in several functions General code and inline help improvements Adds module icon for display in the PowerShell Gallery 2004.161 \u00b6 Updates Get-MicrosoftEdge with the following: Returns Edge for Windows only Removes -Channels and -Platforms parameters. Filter output with Where-Object instead Returns these channels and downloads only Stable , Beta , EdgeUpdate , and Policy (administrative templates) Filters and returns only the latest version of each of the above channels and downloads Output includes Channel (Stable, Beta etc.) and Release (Enterprise, Consumer) to enable filtering 2004.157 \u00b6 Adds Get-MicrosoftWvdInfraAgent Adds Get-dnGrep Recode of Get-PaintDotNet (or how did I not know about ConvertFrom-StringData before?) To simplify output, removes Linux, macOS output from Get-CitrixWorkspaceApp , Get-GoogleChrome , Get-OracleVirtuaBox , Get-LibreOffice , Get-MicrosoftVisualStudioCode , Get-MozillaFirefox , Get-OracleVirtualBox , Get-TeamViewer Updates RegEx method to extract version across various functions to simplify code Splits Pester tests for Public functions to allow for faster local testing 2004.147 \u00b6 Adds Get-Handbrake , Get-KeePass , Get-OpenShellMenu , Get-VastLimitsUberAgent , Get-WinSCP Removes macOS and Linux output from Get-AdobeAcrobatReader , Get-LibreOffice Filters macOS and Linux output from private function ConvertFrom-GitHubReleasesJson.ps1 Fixes spaces in private function ConvertFrom-SourceForgeReleasesJson 2004.141 \u00b6 Adds private function ConvertFrom-SourceForgeReleasesJson to convert JSON release info from SourceForge projects and simplify adding additional functions that pull release info from SourceForge projects. Release information is limited by what's provided from SourceForge Updates Get-WinMerge to use ConvertFrom-SourceForgeReleasesJson Adds Get-7Zip , Get-PDFForgePDFCreator Renames -TrustCertificate parameter in private function Invoke-WebContent to -SkipCertificateCheck to align with -SkipCertificateCheck available in ' Invoke-WebRequest in PowerShell Core Enables -SkipCertificateCheck for both PowerShell Core and Windows PowerShell in Invoke-WebContent . Previously supported Windows PowerShell only Improves code in Invoke-WebContent Adds -Uri parameter validation in Get-GitHubRelease to ensure valid GitHub URLs are passed to the function Sets function global ErrorPreference to Stop to ensure better exception output from functions in the event of failures 2004.139 \u00b6 Adds ConvertFrom-GitHubReleasesJson to standardise queries to GitHub repositories Updates Get-Atom , Get-BISF , Get-GitForWindows , Get-Greenshot , Get-MicrosoftPowerShellCore , Get-OpenJDK , Get-ShareX , Get-mRemoteNG to use ConvertFrom-GitHubReleasesJson Updates RegEx for version matching strings for BISF , GitForWindows , ShareX Adds Get-Architecture and Get-Platform private functions Adds Get-GitHubRelease to enable returning version and downloads from any GitHub repository. Use to get versions of applications on GitHub that aren't yet included in Evergreen 2004.134 \u00b6 Fixes an issue where Get-Zoom was still returning a URI to downloads with query strings attached. 2004.133 \u00b6 Updates URL to current version for TeamViewer . New URL requires different approach to query Adds Invoke-SystemNetRequest that uses System.Net.WebRequest to make a HTTP request and return response Updates Get-TeamViewer to use Invoke-SystemNetRequest to retrieve version from updated URL. Updates code to return version and download URL as a result Updates Get-Zoom to use Resolve-Uri to follow download URLs and find version number. Get-Zoom now returns more versions numbers for Zoom downloads than previously. Updates RegEx approach that returns version numbers from download URLs 2004.126 \u00b6 Adds back Get-FileZilla using the application update API. Currently returns only the 64-bit version of FileZilla for Windows. 2004.125 \u00b6 Adds Get-MicrosoftOneDrive . We recommend validating versions returned by this function with OneDrive release notes Removes Get-FileZilla until a more robust process to return versions and download can be created Removes progress bar for Invoke-WebRequest for faster query of APIs Updates Get-NotepadPlusPlus to use the GitHub releases API to find new versions as the application update API can be out of date 2002.120 \u00b6 Updates Get-GitForWindows to return correct version number Updates Get-Zoom to return version number correctly Adds Resolve-Uri with a new method of returning redirects from 301/302 via @iainbrighton 2001.117 \u00b6 Updates Get-FileZilla to return 32-bit and 64-bit download URIs 2001.110 \u00b6 Adds Get-MicrosoftTeams Update error handling in Get-VideoLanVlcPlayer 2001.104 \u00b6 Adds Get-MicrosoftEdge for the new Chromium based Microsoft Edge Additional verbose output in Invoke-WebContent 1911.101 \u00b6 Adds Get-ScooterBeyondCompare Updates XML parsing approach in Get-CitrixRssFeed , Get-CitrixWorkspaceApp , Get-NotepadPlusPlus , Get-VideoLanVlcPlayer 1911.97 \u00b6 Adds private function Resolve-RedirectedUri to handle resolving 301/302 redirects on PowerShell Core and Windows PowerShell Updates Get-VideoLanVlcPlayer , Get-MicrosoftSsms , Get-FoxitReader , Get-MicrosoftFSLogixApps , Get-Zoom with full support for PowerShell Core Updates logic to filter out prerelease assets in Get-Atom , Get-BISF , Get-GitForWindows , Get-Greenshot , Get-MicrosoftPowerShellCore , Get-OpenJDK , Get-ShareX , Get-mRemoteNG Prevents Get-MicrosoftSsms , Get-CitrixRssFeed , Get-Cyberduck , Get-OracleJava8 from throwing on error Updates to application manifests with some work on silent install commands 1911.95 \u00b6 Adds Get-MicrosoftFSLogixApps 1911.93 \u00b6 Fixes version match in Get-ControlUpAgent 1911.91 \u00b6 Adds Get-Cyberduck 1911.87 \u00b6 Adds Get-JamTreeSizeFree and Get-JamTreeSizeProfessional Fixes URL to Release notes / CHANGELOG in module manifest 1911.84 \u00b6 Changes approach used in Get-ControlUpAgent to retrieve agent details and enables PowerShell Core support Implemented per-application manifests (URLs, RegEx, strings etc.) for simpler function management Adds Export-EvergreenFunctionStrings to export per-application manifests Renames function Get-Java8 to Get-OracleJava8 Adds Pester tests for Public functions to ensure URI properties are valid 1911.75 \u00b6 Updates Get-LibreOffice update query approach to provide a more consistent output Updates Get-LibreOffice to work on PowerShell Core Changes Get-LibreOffice output and parameters to align with other functions Updates Get-NotepadPlusPlus to gracefully handle update server issues (CloudFlare DDOS challenges) Fixes version output in Get-OpenJDK Updates Get-mRemoteNG with handling issues when getting Updates Updates to Public function Pester tests Updates Evergreen.json with consistent property naming and corresponding functions 1910.62 \u00b6 Updates Get-MicrosoftSsms to ensure that the URI property returns the correct SSMS download for the latest version 1910.53 \u00b6 Adds Get-WinMerge 1910.50 \u00b6 Updates Get-VideoLanVlcPlayer output to include ZIP and MSI links for VLC Player for Windows 1910.49 \u00b6 Updates Get-MicrosoftSsms to URL (e.g. https://go.microsoft.com/fwlink/?LinkId=761491 ) to return actual URI 1910.48 \u00b6 Updates Get-VideoLanVlcPlayer to return download mirrors for URI values 1910.47 \u00b6 Adds Get-Atom and Get-TeamViewer 1910.39 \u00b6 Update Get-Zoom to the same HTTP post as https://zoom.us/support/download to return the download URI. Returns download for Windows and VDI environments Build script changes 1910.28 \u00b6 Adds Get-mRemoteNG Update version format to YearMonth.Build (hopefully we won't change this again) Automate versioning in the module to the new format Automate update of appveyor.yml as YearMonth changes Output variables in AppVeyor to \\tests\\appveyor.md 1910.18.26 \u00b6 Adds Get-OpenJDK Changes version notation to: YearMonth.Day.Build 19.10.25 \u00b6 Adds Get-MicrosoftOffice 19.10.24 \u00b6 Fixes URIs for updates in Get-AdobeAcrobatReaderDC Adds additional Pester tests for Public functions to ensure generated URI values are valid 19.10.21 \u00b6 Adds Get-FoxitReader 19.10.20 \u00b6 Fixes output in Get-GitForWindows , Get-MicrosoftSmss 19.10.19 \u00b6 Adds Get-GitForWindows , Get-ShareX 19.10.11 \u00b6 Adds Get-Java8 19.10.9 \u00b6 Adds Get-BISF Adds ConvertTo-DateTime private function to handle DateTime conversion on PowerShell Core / Windows PowerShell 19.10.2 \u00b6 First version pushed to the PowerShell Gallery Initial functions are: Export-EvergreenResourceStrings , Get-AdobeAcrobatReaderDC , Get-CitrixAppLayeringFeed , Get-CitrixApplicationDeliveryManagementFeed , Get-CitrixEndpointManagementFeed , Get-CitrixGatewayFeed , Get-CitrixHypervisorFeed , Get-CitrixLicensingFeed , Get-CitrixReceiverFeed , Get-CitrixSdwanFeed , Get-CitrixVirtualAppsDesktopsFeed , Get-CitrixWorkspaceApp , Get-CitrixWorkspaceAppFeed , Get-CitrixXenServerTools , Get-ControlUpAgent , Get-FileZilla , Get-GoogleChrome , Get-Greenshot , Get-LibreOffice , Get-MicrosoftPowerShellCore , Get-MicrosoftSsms , Get-MicrosoftVisualStudioCode , Get-MozillaFirefox , Get-NotepadPlusPlus , Get-OracleVirtualBox , Get-PaintDotNet , Get-VideoLanVlcPlayer , Get-VMwareTools , Get-Zoom","title":"Changelog"},{"location":"changelog/#change-log","text":"","title":"Change log"},{"location":"changelog/#2106395","text":"Adds AkeoRufus #179 , BlenderLauncher #178 Updates MicrosoftFSLogixApps to return both the production and preview releases #176 Updates Veracrypt to return the complete version number (e.g. 1.24-Update7 ) #166 BREAKING CHANGES: Adds the Production and Preview channels to MicrosoftFSLogixApps that will require filtering with Where-Object","title":"2106.395"},{"location":"changelog/#2105388","text":"Update VMwareHorizonClient with additional filtering to select the latest version correctly to address #161 Add internal function Save-File to download a URL with Invoke-WebRequest and return the downloaded file path Update internal application functions for consistent use of Resolve-SystemNetWebRequest to address #174 - Get-FoxitReader , Get-LogMeInGoToOpener , Get-MicrosoftSsms , Get-MicrosoftVisualStudio , Get-RingCentral , Get-Slack Update references to documentation site https://stealthpuppy.com/Evergreen to https://stealthpuppy.com/evergreen","title":"2105.388"},{"location":"changelog/#2105383","text":"Adds CiscoWebEx ( #141 ), VeraCrypt ( #160 ), KarakunOpenWebStart ( #163 ) Updates MicrosoftWvdRemoteDesktop with the Preview release and fixes source URLs for the public release Adds ARM64 architecture to MicrosoftTeams #162 Adds MSI file type to Wireshark Updates internal function Get-SourceForgeRepoRelease with improvements to find releases and download URIs","title":"2105.383"},{"location":"changelog/#2105371","text":"Adds Audacity , Wireshark ( #153 ), LogMeInGoToMeeting ( #152 ), LogMeInGoToOpener Updates AdobeAcrobat to include Reader updates for 2015 , 2017 , 2020 Updates AdobeAcrobat to include 64-bit updates for Reader and Acrobat DC BREAKING CHANGES Adds the Architecture property to AdobeAcrobat","title":"2105.371"},{"location":"changelog/#2105366","text":"Fixes an issue with Remove-Variable in Save-EvergreenApp Fix #149 Updates Save-EvergreenApp to skip downloading a file if it already exists and adds support for -Force Updates help for Save-EvergreenApp Adds nb-NO language support to MozillaFirefox Fix #146","title":"2105.366"},{"location":"changelog/#2105363","text":"Adds ImageGlass , MicrosoftAzureStorageExplorer , Nomacs , Notable , OBSStudio Updates URL used by TeamViewer to return the current version #147 Updates Save-EvergreenApp to output the result of Get-ChildItem as the output to the pipeline Updates module to use external help MAML-based help with platyPS to make updating help content easier General code improvements","title":"2105.363"},{"location":"changelog/#2104355","text":"Changes FoxitReader to return MSI installers instead of EXEs. Removes Elex, Portuguese (Portugal), and Turkish language support from this application because the installers returned are out of date. Adds the following languages to AdobeAcrobatReaderDC : Swedish, Basque, Catalan, Croatian, Czech, Hungarian, Polish, Romanian, Russian, Slovakian, Slovenian, Turkish, Ukrainian Adds a known issues list to the documentation: https://stealthpuppy.com/evergreen/knownissues.html","title":"2104.355"},{"location":"changelog/#2104348","text":"Adds the Consumer release (to the existing Enterprise release) and Dev, Beta channels, and ARM64 architecture to MicrosoftEdge Adds 64-bit architecture to MicrosoftOneDrive Adds BeekeeperStudio , VMwareHorizonClient , AdoptOpenJDK 8 , AdoptOpenJDK 11 , AdoptOpenJDK 16 Modifies Get-EvergreenApp to load internal per-application functions on demand, instead of loading all of these function into memory at module import Updates Get-CitrixRssFeed to use Invoke-RestMethod to simplify handling of the XML feed Updates various functions to Throw more consistently when encountering errors General code improvements","title":"2104.348"},{"location":"changelog/#2104337","text":"BREAKING CHANGE : This version removes the Get- function for each application and introduces Get-EvergreenApp . See the docs site on how to use the new functions https://stealthpuppy.com/evergreen/ Adds Get-EvergreenApp , Find-EvergreenApp and Save-EvergreenApp Adds file type to SourceForge applications Re-instates ControlUpAgent and ControlUpConsole Fixes the LTS release in Microsoft.NET Fixes localised date format for Gimp , GoogleChrome , MicrosoftEdge , MicrosoftFSLogixApps , MicrosoftSsms , FoxitReader Migrates tests to Pester 5 Adds additional Pester tests for private functions General code optimisations and fixes","title":"2104.337"},{"location":"changelog/#2103305","text":"Fixes an issue with Get-AdobeAcrobat to ensure that Track property has the correct value (DC, 2020, etc.) and the Language property (Neutral, Multi) #130","title":"2103.305"},{"location":"changelog/#2103303","text":"Adds Get-NETworkManager , Get-Anki Updates Get-AdobeAcrobat to include updates for Adobe Acrobat Reader DC. This function now returns updates for both Acrobat Pro and Reader Retrieve the installers for Adobe Acrobat Reader DC with Get-AdobeAcrobatReaderDC and any available updates with Get-AdobeAcrobat Temporarily disables Get-ControlUpAgent and Get-ControlUpConsole","title":"2103.303"},{"location":"changelog/#2103298","text":"Adds Get-MicrosoftAzureDataStudio , Get-ControlUpConsole Updates Get-ControlUpAgent to use the published JSON at https://www.controlup.com/latest-agent-console/ - the last vestiges of any screen scraping code have been swept away Updates Get-AdobeAcrobatReaderDC to account for the new 64-bit version of Reader to add #121 . Filter with Where-Object to return the required version, language and architecture BREAKING CHANGES Adds Architecture property and removes Type property from the output of Get-AdobeAcrobatReaderDC Removes the Adobe Acrobat Reader DC updaters from Get-AdobeAcrobatReaderDC as there is no consistent automated method to determine whether an update is required or optional Changes the output of Get-ControlUpAgent - the values in the Framework property have changed and the function only returns the most recent agent version","title":"2103.298"},{"location":"changelog/#2102291","text":"Renames function Get-AdobeAcrobatProDC to Get-AdobeAcrobat and includes support for returning updates for Adobe Acrobat Pro/Standard DC, 2020, 2017, and 2015. Addresses #114 Alias Get-AdobeAcrobatProDC included for backward compatibility Adds Preview ring to Get-MicrosoftTeams Updates function comment-based help and corrects spelling across several functions BREAKING CHANGES Adds Track property to Get-AdobeAcrobat with values of DC , 2020 , 2017 , 2015 - filter with Where-Object Adds Ring property to Get-MicrosoftTeams for General (i.e., current / production ring) and Preview rings - filter with Where-Object","title":"2102.291"},{"location":"changelog/#2102286","text":"Adds the ARM architecture to Get-MicrosoftVisualStudioCode Updates Get-MicrosoftWvdRemoteDesktop to output the URI property value in the format https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4MntQ instead of the original fwlink source URL (e.g. https://go.microsoft.com/fwlink/?linkid=2068602 ) Updates the following functions to use Invoke-RestMethod (via Invoke-RestMethodWrapper ) instead of Invoke-WebRequest to simplify code and fix an issue where some functions where returning Version as a PSObject instead of System.String ( #109 ) Get-AtlassianBitbucket , Get-Cyberduck , Get-FileZilla , Get-Fork , Get-RingCentral , Get-ScooterBeyondCompare , Get-SumatraPDFReader , Get-VideoLanVlcPlayer Updates module ReleaseNotes location to: https://stealthpuppy.com/evergreen/changelog.html","title":"2102.286"},{"location":"changelog/#2101281","text":"Renames Get-MicrosoftOffice , to Get-Microsoft365Apps to align with product name. The alias Get-MicrosoftOffice is included for backward compatibility Adds the Monthly Enterprise channel to Get-Microsoft365Apps output. See #107 Adds private function Invoke-RestMethodWrapper to enable normalisation across public functions and PowerShell/Windows PowerShell that use Invoke-RestMethod Updates private function Get-GitHubRepoRelease to use Invoke-RestMethodWrapper Updates several public functions to use Invoke-RestMethodWrapper instead of the previous method of Invoke-WebRequest | ConvertTo-Json - Get-1Password , Get-CitrixVMTools , Get-FoxitReader , Get-GoogleChrome , Get-Microsoft365Apps , Get-MicrosoftEdge , Get-MicrosoftTeams , Get-MicrosoftVisualStudioCode , Get-MozillaFirefox , Get-MozillaThunderbird Updates public functions that used Invoke-RestMethod to use Invoke-RestMethodWrapper instead - Get-Gimp , Get-MicrosoftPowerShell , Get-MicrosoftVisualStudio Renames private function Invoke-WebContent to Invoke-WebRequestWrapper and makes general improvements to the handling of Invoke-WebRequest Renames private function ConvertFrom-SourceForgeReleasesJson to Get-SourceForgeRepoRelease Updates and optimises this function to make use of Invoke-RestMethodWrapper so that it can query a SourceForge repository and return the required output in a single function Simplifies code in public functions that return SourceForge releases - Get-7zip , Get-KeePass , Get-PDFForgePDFCreator , Get-ProjectLibre , Get-WinMerge , Get-WinSCP Renames private functions for more descriptive function names (these resolve HTTP 301/302 return codes): Resolve-Uri to Resolve-SystemNetWebRequest Resolve-RedirectedUri to Resolve-InvokeWebRequest BREAKING CHANGES Removes parameter from several functions (below) to simplify existing functions and support a move to a single Get-EvergreenApp function Removes the -Channel and -Platform parameters from Get-MicrosoftVisualStudioCode . Filter output using Where-Object on the Channel and Platform parameters on the function output Removes the -Language parameter from Get-MozillaFirefox and Get-MozillaThunderbird . Filter output using Where-Object { $_.Language -eq \"en-US\" } or similar. These functions will return the following languages (for additional languages, please open an issue on the project): en-US , en-GB , en-CA , es-ES , sv-SE , pt-BR , pt-PT , de , fr , it , ja , nl , zh-CN , zh-TW , ar , hi-IN , ru","title":"2101.281"},{"location":"changelog/#2101275","text":"Adds Get-AtlassianBitbucket , Get-TelegramDesktop , Get-Gimp , Get-BitwardenDesktop , Get-MicrosoftBicep Updates Get-MicrosoftPowerShell to return both the Stable and LTS releases of PowerShell BREAKING CHANGES Update output of Get-MicrosoftOneDrive - changes property Sha256Hash to Sha256 to be consistent with other functions Adds a Release property to the output of Get-MicrosoftPowerShell - use Where-Object to filter on Stable or LTS","title":"2101.275"},{"location":"changelog/#2101263","text":"Adds Get-AdobeBrackets , Get-Fork , Get-MicrosoftVisualStudio , Get-VercelHyper Updates manifest for MicrosoftWvdRemoteDesktop to ensure evergreen source URLs used for resolving downloads Updates manifest for MicrosoftVisualStudioCode","title":"2101.263"},{"location":"changelog/#2101256","text":"Adds Get-Terminals , Get-PeaZipPeaZip , Get-Slack , Get-MicrosoftWindowsPackageManagerClient , Get-KeePassXCTeamKeePassXC , Get-SumatraPDFReader Renames Get-Atom , to Get-GitHubAtom to better align with vendor name. The alias Get-Atom is included for backward compatibility Fixes an issue with Get-AdobeAcrobatReaderDC - Adobe doesn't use HTTPS with their download locations yet. See #99 Updates Get-AdobeAcrobatReaderDC to simplify code and better align manifest with standard structure","title":"2101.256"},{"location":"changelog/#2101249","text":"Adds Get-MicrosoftWvdRemoteDesktop , Get-MozillaThunderbird , Get-ProjectLibre , Get-RingCentral , Get-RCoreTeamRforWindows , Get-StefansToolsgregpWin Renames Get-MicrosoftPowerShellCore to Get-MicrosoftPowerShell - PowerShell Core was renamed to PowerShell with the release of PowerShell 7.0. The alias Get-MicrosoftPowerShellCore is included for backward compatibility Fixes an issue with Get-GitHubRelease that ignored anything passed to the -Uri parameter Adds the MSIX format to the output of Get-MicrosoftOneDrive - filter output with the Type property (I'm not really sure how useful MSIX format for the OneDrive client is right now though...) Adds the VboxGuestAdditions ISO to the output of Get-OracleVirtualBox - filter output with the Type property Refactors Get-Zoom to simplify function code and improve output Updates version output for Get-MicrosoftWvdRtcService and Get-MicrosoftWvdInfraAgent Updates manifest for a number of functions to better align with an updated standard structure (see Manifests/Template.json ) BREAKING CHANGES: Output of Get-MicrosoftOneDrive has changed - Platform has been removed and Type has been added Output of Get-OracleVirtualBox has changed - Type property has been added Output of Get-Zoom has changed - filter output with the Platform and Type properties","title":"2101.249"},{"location":"changelog/#2012242","text":"Adds Get-AdobeAcrobatProDC , Get-TelerikFiddlerEverywhere , Get-1Password Adds Windows Installer downloads output to Get-FoxitReader Updates Get-MicrosoftSsms to query an evergreen update URL to gather new versions from the product releases feed NOTE: the version of SSMS in the releases feed is not the actual current release version - we can only work with what the feed returns; See #82 Updates Get-MicrosoftSsms to output all supported languages for downloads - filter output on the Language property Updates Get-MozillaFirefox to return both Exe and Msi versions of the Firefox installer Adds SHA256 hash property to output from Get-MicrosoftVisualStudioCode Fixes an issue with the URI output in Get-Cyberduck that was returning an additional / character Refactors private function to query the GitHub releases API ( Get-GitHubRepoRelease , replacing ConvertFrom-GitHubReleasesJson ) to use Invoke-RestMethod for simpler public functions used to return GitHub releases Updates the following functions to use Get-GitHubRepoRelease - Get-Atom , Get-AdoptOpenJdk , Get-BISF , Get-dnGrep , Get-GitForWindows , Get-GitHubRelease , Get-Greenshot , Get-Handbrake , Get-MicrosoftPowerShellCore , Get-MicrosoftPowerToys , Get-mRemoteNG , Get-NotepadPlusPlus , Get-OpenJDK , Get-OpenShellMenu , Get-ShareX , Get-Win32OpenSSH , Get-WixToolSet Updates manifest for a number of functions to better align with an updated standard structure (see Manifests/Template.json ) Updates private function ConvertTo-DateTime to better handle date/time format conversion. Still some improvements to be made here BREAKING CHANGES: Updates Get-OpenJDK to return only Msi releases and removes Debug, zip etc. On-going improvements - see #76 Removes Beta and Snapshots releases from Get-Cyberduck Removes Debug releases from Get-Greenshot Removes SafeMode releases from Get-Handbrake Removes Beta channel and ARM64 releases from Get-MicrosoftEdge Removes Zip format releases from Get-MicrosoftPowerShellCore Removes Symbols releases from Get-Win32OpenSSH","title":"2012.242"},{"location":"changelog/#2012225","text":"Adds Get-Microsoft.NET (.NET 5.0 and .NET Core), Get-Win32OpenSSH , Get-MicrosoftPowerToys Updates Get-OpenJDK to return all releases. Further filtering will be added in the future per #76 Updates Get-MozillaFirefox to resolve download URIs for both EXE and MSI Firefox installers and updates output with additional properties ( Architecture , Channel and Type ). See #83 . Note: this introduces a breaking change - the -Platform switch has been removed, you will need to filter the output on the Architecture property Updates Get-AdobeAcrobatReader to return additional languages #84 . Note that Reader DC does not provide the latest version for all languages - it may be a better approach to use the MUI version of the Reader installer if your language is supported","title":"2012.225"},{"location":"changelog/#2010219","text":"Update Get-FileZilla to fix invalid download URI returned from the FileZilla update feed. Fix #75 Update Get-Cyberduck to remove code that replaces // with / . Returns unfiltered URL from Cyberduck update feed. Fix #75","title":"2010.219"},{"location":"changelog/#2009218","text":"Fix Get-FoxitReader with changes to download page in FoxitReader.json . Address #72 Fix Get-Zoom with changes to resolved URIs. Address #73 Update MicrosoftWvdRtcService.json to new version of the Microsoft Remote Desktop WebRTC Redirector Service Update Resolve-Uri with additional verbose output","title":"2009.218"},{"location":"changelog/#2006212","text":"Renames Get-CitrixXenServerTools to Get-CitrixVMTools and adds Get-CitrixXenServerTools alias Updates Get-CitrixVMTools with new release URL for v7 updates and add v9 updates Updates install command lines for Get-CitrixVMTools Adds Get-AdoptOpenJDK - closes #69","title":"2006.212"},{"location":"changelog/#2006207","text":"Fix path in downloads from apps hosted on Source Forge returned in ConvertFrom-SourceForgeReleasesJson.ps1 . Fixes #67 Update Get-MozillaFirefox to return Extended Support Release as well as Current Release. Address #61 Update manifests to address #57 #54 #53 #52","title":"2006.207"},{"location":"changelog/#2006203","text":"Removes Size property from Get-FoxitReader because this isn't being gathered consistently for each download Updates version / releases feed for Get-MicrosoftSsms to ensure the current version is returned Updates the way private function ConvertFrom-SourceForgeReleasesJson returns available downloads from SourceForge Updates Get-7zip , Get-KeePass , Get-PDFForgePDFCreator and Get-WinMerge to support new approach to retrieving SourceForge downloads","title":"2006.203"},{"location":"changelog/#2005190","text":"Adds Get-MicrosoftWvdBootLoader - Get the filename and download URL for the Microsoft Windows Virtual Desktop Remote Desktop Boot Loader Updates Get-FoxitReader to sort release versions correctly and return latest (v10.x)","title":"2005.190"},{"location":"changelog/#2005187","text":"Adds Get-MicrosoftWvdRtcService - returns the version, filename and download for the Microsoft Remote Desktop WebRTC Redirector service for Windows Virtual Desktop","title":"2005.187"},{"location":"changelog/#2005183","text":"Updates Get-VMwareTools to return the very latest version with updated download URL Adds Get-WixToolset","title":"2005.183"},{"location":"changelog/#2005176","text":"Fixes an issue where Get-MicrosoftEdge was only returning ARM64 downloads Updates Get-MicrosoftEdge to only return downloads for the Enterprise ring (removed Consumer ring) Fixes an issue with Get-MicrosoftTeams where it was returning an incorrect download URL","title":"2005.176"},{"location":"changelog/#2005172","text":"Updates Get-MicrosoftEdge to correctly return the latest version and policy files for the Enterprise ring Updates output for private function Resolve-Uri with addition properties Updates Get-FoxitReader , Get-MicrosoftFSLogixApps , and Get-MicrosoftSsms to use Resolve-Uri instead of Resolve-RedirectedUri for improved performance Updates Get-LibreOffice to retrieve latest version from the update API instead of page scraping Updates private function ConvertTo-DateTime with improvements in returning localised date (so the rest of us don't need to be stuck with US date formats) Aligns Get-NotepadPlusPlus with private function ConvertFrom-GitHubReleasesJson to return GitHub release data Fixes output in Get-VMwareTools to ensure correct version and download URL are returned Adds date to output in several functions General code and inline help improvements Adds module icon for display in the PowerShell Gallery","title":"2005.172"},{"location":"changelog/#2004161","text":"Updates Get-MicrosoftEdge with the following: Returns Edge for Windows only Removes -Channels and -Platforms parameters. Filter output with Where-Object instead Returns these channels and downloads only Stable , Beta , EdgeUpdate , and Policy (administrative templates) Filters and returns only the latest version of each of the above channels and downloads Output includes Channel (Stable, Beta etc.) and Release (Enterprise, Consumer) to enable filtering","title":"2004.161"},{"location":"changelog/#2004157","text":"Adds Get-MicrosoftWvdInfraAgent Adds Get-dnGrep Recode of Get-PaintDotNet (or how did I not know about ConvertFrom-StringData before?) To simplify output, removes Linux, macOS output from Get-CitrixWorkspaceApp , Get-GoogleChrome , Get-OracleVirtuaBox , Get-LibreOffice , Get-MicrosoftVisualStudioCode , Get-MozillaFirefox , Get-OracleVirtualBox , Get-TeamViewer Updates RegEx method to extract version across various functions to simplify code Splits Pester tests for Public functions to allow for faster local testing","title":"2004.157"},{"location":"changelog/#2004147","text":"Adds Get-Handbrake , Get-KeePass , Get-OpenShellMenu , Get-VastLimitsUberAgent , Get-WinSCP Removes macOS and Linux output from Get-AdobeAcrobatReader , Get-LibreOffice Filters macOS and Linux output from private function ConvertFrom-GitHubReleasesJson.ps1 Fixes spaces in private function ConvertFrom-SourceForgeReleasesJson","title":"2004.147"},{"location":"changelog/#2004141","text":"Adds private function ConvertFrom-SourceForgeReleasesJson to convert JSON release info from SourceForge projects and simplify adding additional functions that pull release info from SourceForge projects. Release information is limited by what's provided from SourceForge Updates Get-WinMerge to use ConvertFrom-SourceForgeReleasesJson Adds Get-7Zip , Get-PDFForgePDFCreator Renames -TrustCertificate parameter in private function Invoke-WebContent to -SkipCertificateCheck to align with -SkipCertificateCheck available in ' Invoke-WebRequest in PowerShell Core Enables -SkipCertificateCheck for both PowerShell Core and Windows PowerShell in Invoke-WebContent . Previously supported Windows PowerShell only Improves code in Invoke-WebContent Adds -Uri parameter validation in Get-GitHubRelease to ensure valid GitHub URLs are passed to the function Sets function global ErrorPreference to Stop to ensure better exception output from functions in the event of failures","title":"2004.141"},{"location":"changelog/#2004139","text":"Adds ConvertFrom-GitHubReleasesJson to standardise queries to GitHub repositories Updates Get-Atom , Get-BISF , Get-GitForWindows , Get-Greenshot , Get-MicrosoftPowerShellCore , Get-OpenJDK , Get-ShareX , Get-mRemoteNG to use ConvertFrom-GitHubReleasesJson Updates RegEx for version matching strings for BISF , GitForWindows , ShareX Adds Get-Architecture and Get-Platform private functions Adds Get-GitHubRelease to enable returning version and downloads from any GitHub repository. Use to get versions of applications on GitHub that aren't yet included in Evergreen","title":"2004.139"},{"location":"changelog/#2004134","text":"Fixes an issue where Get-Zoom was still returning a URI to downloads with query strings attached.","title":"2004.134"},{"location":"changelog/#2004133","text":"Updates URL to current version for TeamViewer . New URL requires different approach to query Adds Invoke-SystemNetRequest that uses System.Net.WebRequest to make a HTTP request and return response Updates Get-TeamViewer to use Invoke-SystemNetRequest to retrieve version from updated URL. Updates code to return version and download URL as a result Updates Get-Zoom to use Resolve-Uri to follow download URLs and find version number. Get-Zoom now returns more versions numbers for Zoom downloads than previously. Updates RegEx approach that returns version numbers from download URLs","title":"2004.133"},{"location":"changelog/#2004126","text":"Adds back Get-FileZilla using the application update API. Currently returns only the 64-bit version of FileZilla for Windows.","title":"2004.126"},{"location":"changelog/#2004125","text":"Adds Get-MicrosoftOneDrive . We recommend validating versions returned by this function with OneDrive release notes Removes Get-FileZilla until a more robust process to return versions and download can be created Removes progress bar for Invoke-WebRequest for faster query of APIs Updates Get-NotepadPlusPlus to use the GitHub releases API to find new versions as the application update API can be out of date","title":"2004.125"},{"location":"changelog/#2002120","text":"Updates Get-GitForWindows to return correct version number Updates Get-Zoom to return version number correctly Adds Resolve-Uri with a new method of returning redirects from 301/302 via @iainbrighton","title":"2002.120"},{"location":"changelog/#2001117","text":"Updates Get-FileZilla to return 32-bit and 64-bit download URIs","title":"2001.117"},{"location":"changelog/#2001110","text":"Adds Get-MicrosoftTeams Update error handling in Get-VideoLanVlcPlayer","title":"2001.110"},{"location":"changelog/#2001104","text":"Adds Get-MicrosoftEdge for the new Chromium based Microsoft Edge Additional verbose output in Invoke-WebContent","title":"2001.104"},{"location":"changelog/#1911101","text":"Adds Get-ScooterBeyondCompare Updates XML parsing approach in Get-CitrixRssFeed , Get-CitrixWorkspaceApp , Get-NotepadPlusPlus , Get-VideoLanVlcPlayer","title":"1911.101"},{"location":"changelog/#191197","text":"Adds private function Resolve-RedirectedUri to handle resolving 301/302 redirects on PowerShell Core and Windows PowerShell Updates Get-VideoLanVlcPlayer , Get-MicrosoftSsms , Get-FoxitReader , Get-MicrosoftFSLogixApps , Get-Zoom with full support for PowerShell Core Updates logic to filter out prerelease assets in Get-Atom , Get-BISF , Get-GitForWindows , Get-Greenshot , Get-MicrosoftPowerShellCore , Get-OpenJDK , Get-ShareX , Get-mRemoteNG Prevents Get-MicrosoftSsms , Get-CitrixRssFeed , Get-Cyberduck , Get-OracleJava8 from throwing on error Updates to application manifests with some work on silent install commands","title":"1911.97"},{"location":"changelog/#191195","text":"Adds Get-MicrosoftFSLogixApps","title":"1911.95"},{"location":"changelog/#191193","text":"Fixes version match in Get-ControlUpAgent","title":"1911.93"},{"location":"changelog/#191191","text":"Adds Get-Cyberduck","title":"1911.91"},{"location":"changelog/#191187","text":"Adds Get-JamTreeSizeFree and Get-JamTreeSizeProfessional Fixes URL to Release notes / CHANGELOG in module manifest","title":"1911.87"},{"location":"changelog/#191184","text":"Changes approach used in Get-ControlUpAgent to retrieve agent details and enables PowerShell Core support Implemented per-application manifests (URLs, RegEx, strings etc.) for simpler function management Adds Export-EvergreenFunctionStrings to export per-application manifests Renames function Get-Java8 to Get-OracleJava8 Adds Pester tests for Public functions to ensure URI properties are valid","title":"1911.84"},{"location":"changelog/#191175","text":"Updates Get-LibreOffice update query approach to provide a more consistent output Updates Get-LibreOffice to work on PowerShell Core Changes Get-LibreOffice output and parameters to align with other functions Updates Get-NotepadPlusPlus to gracefully handle update server issues (CloudFlare DDOS challenges) Fixes version output in Get-OpenJDK Updates Get-mRemoteNG with handling issues when getting Updates Updates to Public function Pester tests Updates Evergreen.json with consistent property naming and corresponding functions","title":"1911.75"},{"location":"changelog/#191062","text":"Updates Get-MicrosoftSsms to ensure that the URI property returns the correct SSMS download for the latest version","title":"1910.62"},{"location":"changelog/#191053","text":"Adds Get-WinMerge","title":"1910.53"},{"location":"changelog/#191050","text":"Updates Get-VideoLanVlcPlayer output to include ZIP and MSI links for VLC Player for Windows","title":"1910.50"},{"location":"changelog/#191049","text":"Updates Get-MicrosoftSsms to URL (e.g. https://go.microsoft.com/fwlink/?LinkId=761491 ) to return actual URI","title":"1910.49"},{"location":"changelog/#191048","text":"Updates Get-VideoLanVlcPlayer to return download mirrors for URI values","title":"1910.48"},{"location":"changelog/#191047","text":"Adds Get-Atom and Get-TeamViewer","title":"1910.47"},{"location":"changelog/#191039","text":"Update Get-Zoom to the same HTTP post as https://zoom.us/support/download to return the download URI. Returns download for Windows and VDI environments Build script changes","title":"1910.39"},{"location":"changelog/#191028","text":"Adds Get-mRemoteNG Update version format to YearMonth.Build (hopefully we won't change this again) Automate versioning in the module to the new format Automate update of appveyor.yml as YearMonth changes Output variables in AppVeyor to \\tests\\appveyor.md","title":"1910.28"},{"location":"changelog/#19101826","text":"Adds Get-OpenJDK Changes version notation to: YearMonth.Day.Build","title":"1910.18.26"},{"location":"changelog/#191025","text":"Adds Get-MicrosoftOffice","title":"19.10.25"},{"location":"changelog/#191024","text":"Fixes URIs for updates in Get-AdobeAcrobatReaderDC Adds additional Pester tests for Public functions to ensure generated URI values are valid","title":"19.10.24"},{"location":"changelog/#191021","text":"Adds Get-FoxitReader","title":"19.10.21"},{"location":"changelog/#191020","text":"Fixes output in Get-GitForWindows , Get-MicrosoftSmss","title":"19.10.20"},{"location":"changelog/#191019","text":"Adds Get-GitForWindows , Get-ShareX","title":"19.10.19"},{"location":"changelog/#191011","text":"Adds Get-Java8","title":"19.10.11"},{"location":"changelog/#19109","text":"Adds Get-BISF Adds ConvertTo-DateTime private function to handle DateTime conversion on PowerShell Core / Windows PowerShell","title":"19.10.9"},{"location":"changelog/#19102","text":"First version pushed to the PowerShell Gallery Initial functions are: Export-EvergreenResourceStrings , Get-AdobeAcrobatReaderDC , Get-CitrixAppLayeringFeed , Get-CitrixApplicationDeliveryManagementFeed , Get-CitrixEndpointManagementFeed , Get-CitrixGatewayFeed , Get-CitrixHypervisorFeed , Get-CitrixLicensingFeed , Get-CitrixReceiverFeed , Get-CitrixSdwanFeed , Get-CitrixVirtualAppsDesktopsFeed , Get-CitrixWorkspaceApp , Get-CitrixWorkspaceAppFeed , Get-CitrixXenServerTools , Get-ControlUpAgent , Get-FileZilla , Get-GoogleChrome , Get-Greenshot , Get-LibreOffice , Get-MicrosoftPowerShellCore , Get-MicrosoftSsms , Get-MicrosoftVisualStudioCode , Get-MozillaFirefox , Get-NotepadPlusPlus , Get-OracleVirtualBox , Get-PaintDotNet , Get-VideoLanVlcPlayer , Get-VMwareTools , Get-Zoom","title":"19.10.2"},{"location":"examples/","text":"Example usage \u00b6 Here's a few examples of using Evergreen functions to return application versions and downloads. Microsoft Edge \u00b6 Get-EvergreenApp -Name MicrosoftEdge will return the latest versions and downloads for Microsoft Edge, including Group Policy administrative templates. To return the latest version of Microsoft Edge and the download URI for 64-bit Windows, use the following syntax: Get-EvergreenApp -Name MicrosoftEdge | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Channel -eq \"Stable\" } This will return output similar to the following: Version : 88 . 0 . 705 . 63 Platform : Windows Channel : Stable Release : Enterprise Architecture : x64 Date : 5 / 2 / 2021 6 : 39 : 00 pm Hash : B6616258484997E8AB77EFCE5C313EDEFD1F056159ACA70156122414C0BD2E60 URI : https :// msedge . sf . dl . delivery . mp . microsoft . com / filestreamingservice / files / e2d06b69 - 9e44 - 45e1-bdf5-b3b827fe06b2 / MicrosoftEdgeEnterpriseX64 . msi Microsoft FSLogix Apps \u00b6 Get-EvergreenApp -Name MicrosoftFSLogixApps will return the latest version and download URI for Microsoft FSLogix Apps. Because the output is simple, no additional filtering is required: Get-EvergreenApp -Name MicrosoftFSLogixApps Version : 2 . 9 . 7654 . 46150 Date : 9 / 1 / 2021 12 : 54 : 48 am URI : https :// download . microsoft . com / download / 4 / 8 / 2 / 4828e1c7 - 176a - 45bf-bc6b-cce0f54ce04c / FSLogix_Apps_2 . 9 . 7654 . 46150 . zip Microsoft Teams \u00b6 Most Windows desktop environments are going to be on 64-bit Windows, so to get the 64-bit version of Microsoft Teams use the following syntax: Get-EvergreenApp -Name MicrosoftTeams | Where-Object { $_ . Architecture -eq \"x64\" } Microsoft OneDrive \u00b6 Get-EvergreenApp -Name MicrosoftOneDrive uses the OneDrive update feed to return version from several release rings - Enterprise , Production and Insider . Often the Production ring returns more than one release: Version : 21 . 016 . 0124 . 0002 Ring : Insider Sha256 : BP / TxWlUFk0rbPVXRlbjYLhddSROtWOFTk7gCK8PWJc = Type : Exe URI : https :// oneclient . sfx . ms / Win / Insiders / 21 . 016 . 0124 . 0002 / OneDriveSetup . exe Version : 21 . 016 . 0124 . 0002 Ring : Insider Sha256 : N / A Type : Msix URI : https :// oneclient . sfx . ms / Win / Insiders / 21 . 016 . 0124 . 0002 / Microsoft . OneDriveSyncClient_8wekyb3d8bbwe . msix Version : 21 . 002 . 0104 . 0005 Ring : Production Sha256 : 8xzNz / Yt2ahAc / BZxN5j5gWc7aWypo0A46uUROq8vzg = Type : Exe URI : https :// oneclient . sfx . ms / Win / Prod / 21 . 002 . 0104 . 0005 / OneDriveSetup . exe Version : 21 . 002 . 0104 . 0005 Ring : Production Sha256 : N / A Type : Msix URI : https :// oneclient . sfx . ms / Win / Prod / 21 . 002 . 0104 . 0005 / Microsoft . OneDriveSyncClient_8wekyb3d8bbwe . msix Version : 20 . 169 . 0823 . 0008 Ring : Enterprise Sha256 : kDd6mfMp34H7gp4JRBoM // 3WNnMZGpz7mba5Ns / OtBs = Type : Exe URI : https :// oneclient . sfx . ms / Win / Enterprise / 20 . 169 . 0823 . 0008 / OneDriveSetup . exe Version : 20 . 169 . 0823 . 0008 Ring : Enterprise Sha256 : N / A Type : Msix URI : https :// oneclient . sfx . ms / Win / Enterprise / 20 . 169 . 0823 . 0008 / Microsoft . OneDriveSyncClient_8wekyb3d8bbwe . msix To ensure that we return only the very latest Production version, we need to filter the output: ( Get-EvergreenApp -Name MicrosoftOneDrive | Where-Object { $_ . Type -eq \"Exe\" -and $_ . Ring -eq \"Production\" }) | ` Sort-Object -Property @{ Expression = { [System.Version] $_ . Version }; Descending = $true } | Select-Object -First 1 Adobe Acrobat Reader \u00b6 Getting the version number and downloads for Acrobat Reader requires some more complex filtering. Adobe provides not only an executable installer but also a Windows Installer patch which you may need to apply to ensure the latest version is installed. The following command will return both the en-US installer and the latest update: Get-EvergreenApp -Name AdobeAcrobatReaderDC | Where-Object { $_ . Language -eq \"English\" -or $_ . Language -eq \"Neutral\" } Output should then look similar to the following: Version : 20 . 013 . 20074 Type : Installer Language : English URI : http :// ardownload . adobe . com / pub / adobe / reader / win / AcrobatDC / 2001320074 / AcroRdrDC2001320074_en_US . exe Version : 20 . 013 . 20074 Type : Updater Language : Neutral URI : http :// ardownload . adobe . com / pub / adobe / reader / win / AcrobatDC / 2001320074 / AcroRdrDCUpd2001320074 . msp When downloading the Adobe Acrobat Reader, this could be taken a step further to unnecessarily downloading the Windows Installer patch if the executable installer is already up to date. $Reader = Get-EvergreenApp -Name AdobeAcrobatReaderDC | Where-Object { $_ . Language -eq \"English\" -or $_ . Language -eq \"Neutral\" } $Installer = ( $Reader | Where-Object { $_ . Type -eq \"Installer\" | Sort-Object -Property \"Version\" -Descending })[- 1 ] $Updater = ( $Reader | Where-Object { $_ . Type -eq \"Updater\" | Sort-Object -Property \"Version\" -Descending })[- 1 ] Invoke-WebRequest -Uri $Installer . URI -OutFile ( Split-Path -Path $Installer . URI -Leaf ) -UseBasicParsing If ( $Updater . Version -gt $Installer . Version ) { Invoke-WebRequest -Uri $Updater . URI -OutFile ( Split-Path -Path $Updater . URI -Leaf ) -UseBasicParsing } Mozilla Firefox \u00b6 Get-EvergreenApp -Name MozillaFirefox returns both the current version and extended support release, along with installers in several languages. This means that to return a single version of the Firefox installer, we have a fairly complex query. The example below will return the 64-bit current release of Firefox in the US language and a Windows Installer package. To be doubly sure that we get a single installer, Sort-Object is also used to sort the Version property and return the most recent: ( Get-EvergreenApp -Name MozillaFirefox | Where-Object { $_ . Channel -eq \"LATEST_FIREFOX_VERSION\" -and $_ . Architecture -eq \"x64\" -and $_ . type -eq \"msi\" -and $_ . Language -eq \"en-US\" }) | ` Sort-Object -Property @{ Expression = { [System.Version] $_ . Version }; Descending = $true } | Select-Object -First 1","title":"Example usage"},{"location":"examples/#example-usage","text":"Here's a few examples of using Evergreen functions to return application versions and downloads.","title":"Example usage"},{"location":"examples/#microsoft-edge","text":"Get-EvergreenApp -Name MicrosoftEdge will return the latest versions and downloads for Microsoft Edge, including Group Policy administrative templates. To return the latest version of Microsoft Edge and the download URI for 64-bit Windows, use the following syntax: Get-EvergreenApp -Name MicrosoftEdge | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Channel -eq \"Stable\" } This will return output similar to the following: Version : 88 . 0 . 705 . 63 Platform : Windows Channel : Stable Release : Enterprise Architecture : x64 Date : 5 / 2 / 2021 6 : 39 : 00 pm Hash : B6616258484997E8AB77EFCE5C313EDEFD1F056159ACA70156122414C0BD2E60 URI : https :// msedge . sf . dl . delivery . mp . microsoft . com / filestreamingservice / files / e2d06b69 - 9e44 - 45e1-bdf5-b3b827fe06b2 / MicrosoftEdgeEnterpriseX64 . msi","title":"Microsoft Edge"},{"location":"examples/#microsoft-fslogix-apps","text":"Get-EvergreenApp -Name MicrosoftFSLogixApps will return the latest version and download URI for Microsoft FSLogix Apps. Because the output is simple, no additional filtering is required: Get-EvergreenApp -Name MicrosoftFSLogixApps Version : 2 . 9 . 7654 . 46150 Date : 9 / 1 / 2021 12 : 54 : 48 am URI : https :// download . microsoft . com / download / 4 / 8 / 2 / 4828e1c7 - 176a - 45bf-bc6b-cce0f54ce04c / FSLogix_Apps_2 . 9 . 7654 . 46150 . zip","title":"Microsoft FSLogix Apps"},{"location":"examples/#microsoft-teams","text":"Most Windows desktop environments are going to be on 64-bit Windows, so to get the 64-bit version of Microsoft Teams use the following syntax: Get-EvergreenApp -Name MicrosoftTeams | Where-Object { $_ . Architecture -eq \"x64\" }","title":"Microsoft Teams"},{"location":"examples/#microsoft-onedrive","text":"Get-EvergreenApp -Name MicrosoftOneDrive uses the OneDrive update feed to return version from several release rings - Enterprise , Production and Insider . Often the Production ring returns more than one release: Version : 21 . 016 . 0124 . 0002 Ring : Insider Sha256 : BP / TxWlUFk0rbPVXRlbjYLhddSROtWOFTk7gCK8PWJc = Type : Exe URI : https :// oneclient . sfx . ms / Win / Insiders / 21 . 016 . 0124 . 0002 / OneDriveSetup . exe Version : 21 . 016 . 0124 . 0002 Ring : Insider Sha256 : N / A Type : Msix URI : https :// oneclient . sfx . ms / Win / Insiders / 21 . 016 . 0124 . 0002 / Microsoft . OneDriveSyncClient_8wekyb3d8bbwe . msix Version : 21 . 002 . 0104 . 0005 Ring : Production Sha256 : 8xzNz / Yt2ahAc / BZxN5j5gWc7aWypo0A46uUROq8vzg = Type : Exe URI : https :// oneclient . sfx . ms / Win / Prod / 21 . 002 . 0104 . 0005 / OneDriveSetup . exe Version : 21 . 002 . 0104 . 0005 Ring : Production Sha256 : N / A Type : Msix URI : https :// oneclient . sfx . ms / Win / Prod / 21 . 002 . 0104 . 0005 / Microsoft . OneDriveSyncClient_8wekyb3d8bbwe . msix Version : 20 . 169 . 0823 . 0008 Ring : Enterprise Sha256 : kDd6mfMp34H7gp4JRBoM // 3WNnMZGpz7mba5Ns / OtBs = Type : Exe URI : https :// oneclient . sfx . ms / Win / Enterprise / 20 . 169 . 0823 . 0008 / OneDriveSetup . exe Version : 20 . 169 . 0823 . 0008 Ring : Enterprise Sha256 : N / A Type : Msix URI : https :// oneclient . sfx . ms / Win / Enterprise / 20 . 169 . 0823 . 0008 / Microsoft . OneDriveSyncClient_8wekyb3d8bbwe . msix To ensure that we return only the very latest Production version, we need to filter the output: ( Get-EvergreenApp -Name MicrosoftOneDrive | Where-Object { $_ . Type -eq \"Exe\" -and $_ . Ring -eq \"Production\" }) | ` Sort-Object -Property @{ Expression = { [System.Version] $_ . Version }; Descending = $true } | Select-Object -First 1","title":"Microsoft OneDrive"},{"location":"examples/#adobe-acrobat-reader","text":"Getting the version number and downloads for Acrobat Reader requires some more complex filtering. Adobe provides not only an executable installer but also a Windows Installer patch which you may need to apply to ensure the latest version is installed. The following command will return both the en-US installer and the latest update: Get-EvergreenApp -Name AdobeAcrobatReaderDC | Where-Object { $_ . Language -eq \"English\" -or $_ . Language -eq \"Neutral\" } Output should then look similar to the following: Version : 20 . 013 . 20074 Type : Installer Language : English URI : http :// ardownload . adobe . com / pub / adobe / reader / win / AcrobatDC / 2001320074 / AcroRdrDC2001320074_en_US . exe Version : 20 . 013 . 20074 Type : Updater Language : Neutral URI : http :// ardownload . adobe . com / pub / adobe / reader / win / AcrobatDC / 2001320074 / AcroRdrDCUpd2001320074 . msp When downloading the Adobe Acrobat Reader, this could be taken a step further to unnecessarily downloading the Windows Installer patch if the executable installer is already up to date. $Reader = Get-EvergreenApp -Name AdobeAcrobatReaderDC | Where-Object { $_ . Language -eq \"English\" -or $_ . Language -eq \"Neutral\" } $Installer = ( $Reader | Where-Object { $_ . Type -eq \"Installer\" | Sort-Object -Property \"Version\" -Descending })[- 1 ] $Updater = ( $Reader | Where-Object { $_ . Type -eq \"Updater\" | Sort-Object -Property \"Version\" -Descending })[- 1 ] Invoke-WebRequest -Uri $Installer . URI -OutFile ( Split-Path -Path $Installer . URI -Leaf ) -UseBasicParsing If ( $Updater . Version -gt $Installer . Version ) { Invoke-WebRequest -Uri $Updater . URI -OutFile ( Split-Path -Path $Updater . URI -Leaf ) -UseBasicParsing }","title":"Adobe Acrobat Reader"},{"location":"examples/#mozilla-firefox","text":"Get-EvergreenApp -Name MozillaFirefox returns both the current version and extended support release, along with installers in several languages. This means that to return a single version of the Firefox installer, we have a fairly complex query. The example below will return the 64-bit current release of Firefox in the US language and a Windows Installer package. To be doubly sure that we get a single installer, Sort-Object is also used to sort the Version property and return the most recent: ( Get-EvergreenApp -Name MozillaFirefox | Where-Object { $_ . Channel -eq \"LATEST_FIREFOX_VERSION\" -and $_ . Architecture -eq \"x64\" -and $_ . type -eq \"msi\" -and $_ . Language -eq \"en-US\" }) | ` Sort-Object -Property @{ Expression = { [System.Version] $_ . Version }; Descending = $true } | Select-Object -First 1","title":"Mozilla Firefox"},{"location":"find/","text":"Find supported applications \u00b6 Find-EvergreenApp is used to return a list of applications supported by Evergreen. For example, let's find out whether the Microsoft FSLogix Apps agent is supported by Evergreen: Find-EvergreenApp -Name \"FSLogix\" The Microsoft FSLogix Apps agent is supported by Evergreen, so this returns output like this: Name : MicrosoftFSLogixApps Application : Microsoft FSLogix Apps Link : https :// docs . microsoft . com / fslogix / The value of the Name property can be used with Get-EvergreenApp to return the latest the Microsoft FSLogix Apps agent: Get-EvergreenApp -Name \"MicrosoftFSLogixApps\" Alternatively, we can pass the output from Find-EvergreenApp directly to Get-EvergreenApp : Find-EvergreenApp -Name \"FSLogix\" | Get-EvergreenApp Output \u00b6 Find-EvergreenApp outputs three properties: Name - the identifier of the supported application. This name matches that used in the application manifest Application - the application manifest includes the full application name Link - each application manifest includes a URL to the application's primary home page The output from Find-EvergreenApp will look similar to the following example: Name Application Link ---- ----------- ---- 1Password 1Password https :// 1password . com / 7zip 7zip https :// www . 7-zip . org / AdobeAcrobat Adobe Acrobat https :// helpx . adobe . com / au / enterprise / using / deploying-acrobat . html AdobeAcrobatReaderDC Adobe Acrobat Reader DC https :// acrobat . adobe . com / us / en / acrobat / pdf-reader . html AdobeBrackets Adobe Brackets http :// brackets . io / Parameters \u00b6 Name \u00b6 The -Name parameter is used to specify the application name to return details for. This is a required parameter. The list of supported applications can be found with Find-EvergreenApp . Alias \u00b6 Find-EvergreenApp has an alias of fea to simplify retrieving supported applications, for example: PS / Users / aaron > fea Name Application Link ---- ----------- ---- 1Password 1Password https :// 1password . com / 7zip 7zip https :// www . 7-zip . org /","title":"Find supported applications"},{"location":"find/#find-supported-applications","text":"Find-EvergreenApp is used to return a list of applications supported by Evergreen. For example, let's find out whether the Microsoft FSLogix Apps agent is supported by Evergreen: Find-EvergreenApp -Name \"FSLogix\" The Microsoft FSLogix Apps agent is supported by Evergreen, so this returns output like this: Name : MicrosoftFSLogixApps Application : Microsoft FSLogix Apps Link : https :// docs . microsoft . com / fslogix / The value of the Name property can be used with Get-EvergreenApp to return the latest the Microsoft FSLogix Apps agent: Get-EvergreenApp -Name \"MicrosoftFSLogixApps\" Alternatively, we can pass the output from Find-EvergreenApp directly to Get-EvergreenApp : Find-EvergreenApp -Name \"FSLogix\" | Get-EvergreenApp","title":"Find supported applications"},{"location":"find/#output","text":"Find-EvergreenApp outputs three properties: Name - the identifier of the supported application. This name matches that used in the application manifest Application - the application manifest includes the full application name Link - each application manifest includes a URL to the application's primary home page The output from Find-EvergreenApp will look similar to the following example: Name Application Link ---- ----------- ---- 1Password 1Password https :// 1password . com / 7zip 7zip https :// www . 7-zip . org / AdobeAcrobat Adobe Acrobat https :// helpx . adobe . com / au / enterprise / using / deploying-acrobat . html AdobeAcrobatReaderDC Adobe Acrobat Reader DC https :// acrobat . adobe . com / us / en / acrobat / pdf-reader . html AdobeBrackets Adobe Brackets http :// brackets . io /","title":"Output"},{"location":"find/#parameters","text":"","title":"Parameters"},{"location":"find/#name","text":"The -Name parameter is used to specify the application name to return details for. This is a required parameter. The list of supported applications can be found with Find-EvergreenApp .","title":"Name"},{"location":"find/#alias","text":"Find-EvergreenApp has an alias of fea to simplify retrieving supported applications, for example: PS / Users / aaron > fea Name Application Link ---- ----------- ---- 1Password 1Password https :// 1password . com / 7zip 7zip https :// www . 7-zip . org /","title":"Alias"},{"location":"how/","text":"How Evergreen works \u00b6 Attention Application version and download links are only pulled from official sources (vendor web site, GitHub, SourceForge etc.) and never a third party. Evergreen uses an approach that returns at least the version number and download URI for applications programmatically - thus for each run an Evergreen function it should return the latest version and download link. Evergreen uses several strategies to return the latest version of software: Application update APIs - by using the same approach as the application itself, Evergreen can consistently return the latest version number and download URI - e.g. Microsoft Edge , Mozilla Firefox or Microsoft OneDrive . Fiddler can often be used to find where an application queries for updates Repository APIs - repo hosts including GitHub and SourceForge have APIs that can be queried to return application version and download links - e.g. Atom , Notepad++ or WinMerge Web page queries - often a vendor download pages will include a query that returns JSON when listing versions and download links - this avoids page scraping. Evergreen can mimic this approach to return application download URLs; however, this approach is likely to fail if the vendor changes how their pages work - e.g., Adobe Acrobat Reader DC Static URLs - some vendors provide static or evergreen URLs to their application installers. These URLs often provide additional information in the URL that can be used to determine the application version and can be resolved to the actual target URL - e.g., Microsoft FSLogix Apps or Zoom What Evergreen Doesn't Do \u00b6 Evergreen does not scape HTML - scraping web pages to parse text and determine version strings and download URLs can be problematic when text in the page changes or the page is out of date. Pull requests that use web page scraping will be closed. While the use of RegEx to determine application properties (particularly version numbers) is used for some applications, this approach is not preferred, if possible. For additional applications where the only recourse it to use web page scraping, see the Nevergreen project.","title":"How Evergreen works"},{"location":"how/#how-evergreen-works","text":"Attention Application version and download links are only pulled from official sources (vendor web site, GitHub, SourceForge etc.) and never a third party. Evergreen uses an approach that returns at least the version number and download URI for applications programmatically - thus for each run an Evergreen function it should return the latest version and download link. Evergreen uses several strategies to return the latest version of software: Application update APIs - by using the same approach as the application itself, Evergreen can consistently return the latest version number and download URI - e.g. Microsoft Edge , Mozilla Firefox or Microsoft OneDrive . Fiddler can often be used to find where an application queries for updates Repository APIs - repo hosts including GitHub and SourceForge have APIs that can be queried to return application version and download links - e.g. Atom , Notepad++ or WinMerge Web page queries - often a vendor download pages will include a query that returns JSON when listing versions and download links - this avoids page scraping. Evergreen can mimic this approach to return application download URLs; however, this approach is likely to fail if the vendor changes how their pages work - e.g., Adobe Acrobat Reader DC Static URLs - some vendors provide static or evergreen URLs to their application installers. These URLs often provide additional information in the URL that can be used to determine the application version and can be resolved to the actual target URL - e.g., Microsoft FSLogix Apps or Zoom","title":"How Evergreen works"},{"location":"how/#what-evergreen-doesnt-do","text":"Evergreen does not scape HTML - scraping web pages to parse text and determine version strings and download URLs can be problematic when text in the page changes or the page is out of date. Pull requests that use web page scraping will be closed. While the use of RegEx to determine application properties (particularly version numbers) is used for some applications, this approach is not preferred, if possible. For additional applications where the only recourse it to use web page scraping, see the Nevergreen project.","title":"What Evergreen Doesn't Do"},{"location":"install/","text":"Installing Evergreen \u00b6 PowerShell Support \u00b6 Evergreen supports Windows PowerShell 5.1 and PowerShell 7.0+. Evergreen should work on PowerShell Core 6.x; however, we are not actively testing on that version of PowerShell, so support cannot be guaranteed. Install from the PowerShell Gallery \u00b6 The Evergreen module is published to the PowerShell Gallery and can be found here: Evergreen . The module can be installed from the gallery with: Install-Module -Name Evergreen Import-Module -Name Evergreen Updating the Module \u00b6 If you have installed a previous version of the module from the gallery, you can install the latest update with Update-Module and the -Force parameter: Update-Module -Name Evergreen -Force Advanced Installation \u00b6 In scripted installations (e.g. operating system deployment), you may wish to ensure that the PowerShell Gallery is first trusted before attempting to install the module: If ( Get-PSRepository | Where-Object { $_ . Name -eq \"PSGallery\" -and $_ . InstallationPolicy -ne \"Trusted\" }) { Install-PackageProvider -Name \"NuGet\" -MinimumVersion 2 . 8 . 5 . 208 -Force Set-PSRepository -Name \"PSGallery\" -InstallationPolicy \"Trusted\" } Then we can install or update Evergreen based on whether the module is already installed or out of date: $Installed = Get-Module -Name \"Evergreen\" -ListAvailable | ` Sort-Object -Property @{ Expression = { [System.Version] $_ . Version }; Descending = $true } | ` Select-Object -First 1 $Published = Find-Module -Name \"Evergreen\" If ( $Null -eq $Installed ) { Install-Module -Name \"Evergreen\" } ElseIf ( [System.Version] $Published . Version -gt [System.Version] $Installed . Version ) { Update-Module -Name \"Evergreen\" } Manual Installation from the Repository \u00b6 The module can be downloaded from the GitHub source repository which includes the module in the Evergreen folder. The folder needs to be copied into one of your PowerShell Module Paths. To see the full list of available PowerShell Module paths, use $env:PSModulePath.split(';') in a PowerShell console. Common PowerShell module paths include: Current User: %USERPROFILE%\\Documents\\WindowsPowerShell\\Modules\\ All Users: %ProgramFiles%\\WindowsPowerShell\\Modules\\ OneDrive: $env:OneDrive\\Documents\\WindowsPowerShell\\Modules\\ To install from the repository Download the main branch to your workstation Copy the contents of the Evergreen folder onto your workstation into the desired PowerShell Module path Open a Powershell console with the Run as Administrator option Run Set-ExecutionPolicy using the parameter RemoteSigned or Bypass Unblock the files with Get-ChildItem -Path <path to module> -Recurse | Unblock-File Once installation is complete, you can validate that the module exists by running Get-Module -ListAvailable Evergreen . To use the module, load it with: Import-Module Evergreen","title":"Installation"},{"location":"install/#installing-evergreen","text":"","title":"Installing Evergreen"},{"location":"install/#powershell-support","text":"Evergreen supports Windows PowerShell 5.1 and PowerShell 7.0+. Evergreen should work on PowerShell Core 6.x; however, we are not actively testing on that version of PowerShell, so support cannot be guaranteed.","title":"PowerShell Support"},{"location":"install/#install-from-the-powershell-gallery","text":"The Evergreen module is published to the PowerShell Gallery and can be found here: Evergreen . The module can be installed from the gallery with: Install-Module -Name Evergreen Import-Module -Name Evergreen","title":"Install from the PowerShell Gallery"},{"location":"install/#updating-the-module","text":"If you have installed a previous version of the module from the gallery, you can install the latest update with Update-Module and the -Force parameter: Update-Module -Name Evergreen -Force","title":"Updating the Module"},{"location":"install/#advanced-installation","text":"In scripted installations (e.g. operating system deployment), you may wish to ensure that the PowerShell Gallery is first trusted before attempting to install the module: If ( Get-PSRepository | Where-Object { $_ . Name -eq \"PSGallery\" -and $_ . InstallationPolicy -ne \"Trusted\" }) { Install-PackageProvider -Name \"NuGet\" -MinimumVersion 2 . 8 . 5 . 208 -Force Set-PSRepository -Name \"PSGallery\" -InstallationPolicy \"Trusted\" } Then we can install or update Evergreen based on whether the module is already installed or out of date: $Installed = Get-Module -Name \"Evergreen\" -ListAvailable | ` Sort-Object -Property @{ Expression = { [System.Version] $_ . Version }; Descending = $true } | ` Select-Object -First 1 $Published = Find-Module -Name \"Evergreen\" If ( $Null -eq $Installed ) { Install-Module -Name \"Evergreen\" } ElseIf ( [System.Version] $Published . Version -gt [System.Version] $Installed . Version ) { Update-Module -Name \"Evergreen\" }","title":"Advanced Installation"},{"location":"install/#manual-installation-from-the-repository","text":"The module can be downloaded from the GitHub source repository which includes the module in the Evergreen folder. The folder needs to be copied into one of your PowerShell Module Paths. To see the full list of available PowerShell Module paths, use $env:PSModulePath.split(';') in a PowerShell console. Common PowerShell module paths include: Current User: %USERPROFILE%\\Documents\\WindowsPowerShell\\Modules\\ All Users: %ProgramFiles%\\WindowsPowerShell\\Modules\\ OneDrive: $env:OneDrive\\Documents\\WindowsPowerShell\\Modules\\ To install from the repository Download the main branch to your workstation Copy the contents of the Evergreen folder onto your workstation into the desired PowerShell Module path Open a Powershell console with the Run as Administrator option Run Set-ExecutionPolicy using the parameter RemoteSigned or Bypass Unblock the files with Get-ChildItem -Path <path to module> -Recurse | Unblock-File Once installation is complete, you can validate that the module exists by running Get-Module -ListAvailable Evergreen . To use the module, load it with: Import-Module Evergreen","title":"Manual Installation from the Repository"},{"location":"issues/","text":"Known issues \u00b6 Public Functions \u00b6 Get-EvergreenApp \u00b6 Get-EvergreenApp does not fully support proxy servers. This will be fixed in a future release. Save-EvergreenApp \u00b6 The folder structure created by Save-EvergreenApp uses a static set of properties from the input object. This path cannot currently by customised by the user. Attention Save-EvergreenApp does not fully support proxy servers. This will be fixed in a future release. Application Functions \u00b6 7zip \u00b6 The 32-bit installers returned by 7Zip link to a SourceForge download page instead of the file directly. These installers can be downloaded by Invoke-WebRequest by setting the UserAgent to the Googlebot . AdobeAcrobat \u00b6 Where Adobe releases an update for Acrobat/Reader for Windows ahead of macOS, the current patch release may not be returned. In most cases, Adobe keeps both platforms in sync, so this should be a rare occurrence. The determine the current update version of AdobeAcrobat , the URL for macOS updates is used: https://armmf.adobe.com/arm-manifests/win/AcrobatDC/acrobat/current_version.txt . This provides a simple text lookup of the latest version number. Note The Windows version of Adobe Acrobat and Reader uses an update URL like: https://armmf.adobe.com/arm-manifests/win/AcrobatDCManifest3.msi , which would require unpacking and parsing the MSI file. Doing so may modify the host, so it will not be implemented. AdobeAcrobatReaderDC \u00b6 The JSON data returned from the Adobe Acrobat Reader DC download URL ( https://get.adobe.com/reader/webservices/json/standalone/ ) returns extraneous data for the following languages, thus they have not been included in the manifest: Portuguese, Chinese (Simplified), Chinese (Traditional). CitrixWorkspaceApp \u00b6 The version of the HDX RealTime Media Engine for Microsoft Skype for Business for Windows returned by CitrixWorkspaceApp is out of date. This is the version of the HDX RTME that is returned by the Workspace App update feed ( https://downloadplugins.citrix.com/ReceiverUpdates/Prod/catalog_win.xml ). Use CitrixWorkspaceAppFeed to find the latest version of the HDX RTME. Note CitrixWorkspaceAppFeed returns a link to the download page and not the installer directly. See Get-CitrixWorkspaceApp does not return the latest Citrix HDX RealTime Media Engine . MicrosoftSsms \u00b6 The product release feed used by the Microsoft SQL Server Management Studio (e.g., https://download.microsoft.com/download/3/f/d/3fd533f5-fdfc-407d-98a6-d5deb214d13b/SSMS_PRODUCTRELEASESFEED.xml ) includes the internal build number of the SQL Server Management Studio and not the display version, thus the version return will be similar to 15.0.18369.0 instead of the display version: 18.9.1 . See Download SQL Server Management Studio (SSMS) for more info. Also see SQL SSMS is reporting the wrong version . Microsoft Teams \u00b6 The version number returned by the Microsoft Teams update API may be slightly different to the version number displayed in the ProductVersion property in the MSI or in Programs and Features. For example, Get-EvergreenApp -Name MicrosoftTeams may report a version number of 1.4.00.8872 , but the Windows Installer may report 1.4.0.8872 . Also see Get-MicrosoftTeams displays slightly wrong formatted version number . OBS Studio \u00b6 Returning the latest version and download for OBS Studio may fail when the OBS Project modifies the availability of the update manifest at https://obsproject.com/update_studio/manifest.json . Get-EvergreenApp -Name OBSStudio will return a 404 error. The only recourse is to wait until the OBS Project makes the manifest available again. Evergreen could query versions from the GitHub repository; however, the the OBS Project does not consistently maintain releases in the repository. In some instances a specific release of OBS Studio may address an issue with the macOS version only and OBSStudio would then return no results. Also see Get-evergreenapp OBSStudio not working due to a 404 errors . VMwareHorizonClient \u00b6 VMwareHorizonClient may not always return the current release - the major version property in the VMware Horizon Client software update data does not use easily sortable versioning. This may be fixed in a future release. Also see VMware Horizon Client reporting out of date version . Note VMwareHorizonClient returns the Horizon Client in .tar format. This the same URL used when the Horizon Client updates itself - you will need to unpack the .tar file to retrieve the executable installer. Zoom \u00b6 Zoom returns versions as Latest for some downloads - the source used by this function does not provide a method for determining the version number.","title":"Known issues"},{"location":"issues/#known-issues","text":"","title":"Known issues"},{"location":"issues/#public-functions","text":"","title":"Public Functions"},{"location":"issues/#get-evergreenapp","text":"Get-EvergreenApp does not fully support proxy servers. This will be fixed in a future release.","title":"Get-EvergreenApp"},{"location":"issues/#save-evergreenapp","text":"The folder structure created by Save-EvergreenApp uses a static set of properties from the input object. This path cannot currently by customised by the user. Attention Save-EvergreenApp does not fully support proxy servers. This will be fixed in a future release.","title":"Save-EvergreenApp"},{"location":"issues/#application-functions","text":"","title":"Application Functions"},{"location":"issues/#7zip","text":"The 32-bit installers returned by 7Zip link to a SourceForge download page instead of the file directly. These installers can be downloaded by Invoke-WebRequest by setting the UserAgent to the Googlebot .","title":"7zip"},{"location":"issues/#adobeacrobat","text":"Where Adobe releases an update for Acrobat/Reader for Windows ahead of macOS, the current patch release may not be returned. In most cases, Adobe keeps both platforms in sync, so this should be a rare occurrence. The determine the current update version of AdobeAcrobat , the URL for macOS updates is used: https://armmf.adobe.com/arm-manifests/win/AcrobatDC/acrobat/current_version.txt . This provides a simple text lookup of the latest version number. Note The Windows version of Adobe Acrobat and Reader uses an update URL like: https://armmf.adobe.com/arm-manifests/win/AcrobatDCManifest3.msi , which would require unpacking and parsing the MSI file. Doing so may modify the host, so it will not be implemented.","title":"AdobeAcrobat"},{"location":"issues/#adobeacrobatreaderdc","text":"The JSON data returned from the Adobe Acrobat Reader DC download URL ( https://get.adobe.com/reader/webservices/json/standalone/ ) returns extraneous data for the following languages, thus they have not been included in the manifest: Portuguese, Chinese (Simplified), Chinese (Traditional).","title":"AdobeAcrobatReaderDC"},{"location":"issues/#citrixworkspaceapp","text":"The version of the HDX RealTime Media Engine for Microsoft Skype for Business for Windows returned by CitrixWorkspaceApp is out of date. This is the version of the HDX RTME that is returned by the Workspace App update feed ( https://downloadplugins.citrix.com/ReceiverUpdates/Prod/catalog_win.xml ). Use CitrixWorkspaceAppFeed to find the latest version of the HDX RTME. Note CitrixWorkspaceAppFeed returns a link to the download page and not the installer directly. See Get-CitrixWorkspaceApp does not return the latest Citrix HDX RealTime Media Engine .","title":"CitrixWorkspaceApp"},{"location":"issues/#microsoftssms","text":"The product release feed used by the Microsoft SQL Server Management Studio (e.g., https://download.microsoft.com/download/3/f/d/3fd533f5-fdfc-407d-98a6-d5deb214d13b/SSMS_PRODUCTRELEASESFEED.xml ) includes the internal build number of the SQL Server Management Studio and not the display version, thus the version return will be similar to 15.0.18369.0 instead of the display version: 18.9.1 . See Download SQL Server Management Studio (SSMS) for more info. Also see SQL SSMS is reporting the wrong version .","title":"MicrosoftSsms"},{"location":"issues/#microsoft-teams","text":"The version number returned by the Microsoft Teams update API may be slightly different to the version number displayed in the ProductVersion property in the MSI or in Programs and Features. For example, Get-EvergreenApp -Name MicrosoftTeams may report a version number of 1.4.00.8872 , but the Windows Installer may report 1.4.0.8872 . Also see Get-MicrosoftTeams displays slightly wrong formatted version number .","title":"Microsoft Teams"},{"location":"issues/#obs-studio","text":"Returning the latest version and download for OBS Studio may fail when the OBS Project modifies the availability of the update manifest at https://obsproject.com/update_studio/manifest.json . Get-EvergreenApp -Name OBSStudio will return a 404 error. The only recourse is to wait until the OBS Project makes the manifest available again. Evergreen could query versions from the GitHub repository; however, the the OBS Project does not consistently maintain releases in the repository. In some instances a specific release of OBS Studio may address an issue with the macOS version only and OBSStudio would then return no results. Also see Get-evergreenapp OBSStudio not working due to a 404 errors .","title":"OBS Studio"},{"location":"issues/#vmwarehorizonclient","text":"VMwareHorizonClient may not always return the current release - the major version property in the VMware Horizon Client software update data does not use easily sortable versioning. This may be fixed in a future release. Also see VMware Horizon Client reporting out of date version . Note VMwareHorizonClient returns the Horizon Client in .tar format. This the same URL used when the Horizon Client updates itself - you will need to unpack the .tar file to retrieve the executable installer.","title":"VMwareHorizonClient"},{"location":"issues/#zoom","text":"Zoom returns versions as Latest for some downloads - the source used by this function does not provide a method for determining the version number.","title":"Zoom"},{"location":"save/","text":"Download installers \u00b6 Evergreen includes the function Save-EvergreenApp that simplifies downloading application installers that are returned from Get-EvergreenApp . All applications will return at least a Version and URI property with many returning additional properties including Architecture , Language , Type , Ring , Channel and Release , dependent on the target application. Additionally, the installer file name is typically determined dynamically with the URI property. So to retrieve and download an application installer, we need to use code similar to the following that the filters for the required download and determines the file name before using Invoke-WebRequest to download the file. $Teams = Get-EvergreenApp -Name MicrosoftTeams | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Ring -eq \"General\" } $TeamsInstaller = Split-Path -Path $Teams . Uri -Leaf Invoke-WebRequest -Uri $Teams . Uri -OutFile \".\\$TeamsInstaller\" -UseBasicParsing This is a simple example, but an application with additional properties and output values is likely to require more complex code to download. For example, Microsoft OneDrive includes a few additional properties and several items in the returned object Version : 89 . 0 . 774 . 68 Platform : Windows Channel : Stable Release : Enterprise Architecture : x64 Date : 1 / 4 / 2021 7 : 29 : 00 pm Hash : 6E1856B2972688D109F550B0A62C264E9829FF1F392E3BE0FC308900AEFD3455 URI : https :// msedge . sf . dl . delivery . mp . microsoft . com / filestreamingservice / files / a67b9c83 - 1671 - 45ab - 982f-e02318eeffc9 / MicrosoftEdgeEnterpriseX64 . msi Save-EvergreenApp accepts the output from each application and simplifies downloading the installers included in an application object by determining the target file name, and constructing a target directory path based on the properties in the application output. Get-EvergreenApp -Name MicrosoftOneDrive | Save-EvergreenApp -Path \"C:\\Apps\\OneDrive\" Save-EvergreenApp will create a folder structure below the path provided (e.g. C:\\Apps\\OneDrive ) built from the various properties in the application object passed to it. A folder structure, based on the available properties in the following list will be created in this order - Channel , Release , Ring , Version , Language , Architecture . Save-EvergreenApp will return the path to each downloaded file that can be used passed to other functions in a script. In the example using MicrosoftOneDrive above, Save-EvergreenApp returns output similar to this: Path ---- C :\\ Apps \\ OneDrive \\ Enterprise \\ 20 . 169 . 0823 . 0008 \\ OneDriveSetup . exe C :\\ Apps \\ OneDrive \\ Production \\ 21 . 030 . 0211 . 0002 \\ OneDriveSetup . exe C :\\ Apps \\ OneDrive \\ Production \\ 21 . 052 . 0314 . 0001 \\ OneDriveSetup . exe C :\\ Apps \\ OneDrive \\ Insider \\ 21 . 056 . 0318 . 0001 \\ OneDriveSetup . exe Right now, the output path that Save-EvergreenApp builds cannot be customised. Parameters \u00b6 InputObject \u00b6 The -Name parameter is used to specify the application name to return details for. This is a required parameter. The list of supported applications can be found with Find-EvergreenApp . Path \u00b6 The target directory under which a folder structure will be created and application installers saved into. Typically the target path used will be a path per application. Verbose \u00b6 The -Verbose parameter can be useful for observing application downloads and save paths, including troubleshooting when the expected application details are not returned. When using the -Verbose parameter, Invoke-WebRequest will show download progress which significantly impacts download speed. To suppress download progress, add the -NoProgress switch parameter as well. -NoProgress \u00b6 Save-EvergreenApp uses Invoke-WebRequest to download target application installers. Download progress is suppressed by default for faster downloads; however, when -Verbose is used, download progress will be displayed. Use -NoProgress with -Verbose to suppress download progress while also displaying verbose output. -Force \u00b6 Forces this function to download the target application installers from the URI property even if they already exist in the target directory. Alias \u00b6 Save-EvergreenApp has an alias of sea to simplify downloading applications, for example: PS / Users / aaron > gea Slack | sea -Path / Users / aaron / Temp / Slack","title":"Download installers"},{"location":"save/#download-installers","text":"Evergreen includes the function Save-EvergreenApp that simplifies downloading application installers that are returned from Get-EvergreenApp . All applications will return at least a Version and URI property with many returning additional properties including Architecture , Language , Type , Ring , Channel and Release , dependent on the target application. Additionally, the installer file name is typically determined dynamically with the URI property. So to retrieve and download an application installer, we need to use code similar to the following that the filters for the required download and determines the file name before using Invoke-WebRequest to download the file. $Teams = Get-EvergreenApp -Name MicrosoftTeams | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Ring -eq \"General\" } $TeamsInstaller = Split-Path -Path $Teams . Uri -Leaf Invoke-WebRequest -Uri $Teams . Uri -OutFile \".\\$TeamsInstaller\" -UseBasicParsing This is a simple example, but an application with additional properties and output values is likely to require more complex code to download. For example, Microsoft OneDrive includes a few additional properties and several items in the returned object Version : 89 . 0 . 774 . 68 Platform : Windows Channel : Stable Release : Enterprise Architecture : x64 Date : 1 / 4 / 2021 7 : 29 : 00 pm Hash : 6E1856B2972688D109F550B0A62C264E9829FF1F392E3BE0FC308900AEFD3455 URI : https :// msedge . sf . dl . delivery . mp . microsoft . com / filestreamingservice / files / a67b9c83 - 1671 - 45ab - 982f-e02318eeffc9 / MicrosoftEdgeEnterpriseX64 . msi Save-EvergreenApp accepts the output from each application and simplifies downloading the installers included in an application object by determining the target file name, and constructing a target directory path based on the properties in the application output. Get-EvergreenApp -Name MicrosoftOneDrive | Save-EvergreenApp -Path \"C:\\Apps\\OneDrive\" Save-EvergreenApp will create a folder structure below the path provided (e.g. C:\\Apps\\OneDrive ) built from the various properties in the application object passed to it. A folder structure, based on the available properties in the following list will be created in this order - Channel , Release , Ring , Version , Language , Architecture . Save-EvergreenApp will return the path to each downloaded file that can be used passed to other functions in a script. In the example using MicrosoftOneDrive above, Save-EvergreenApp returns output similar to this: Path ---- C :\\ Apps \\ OneDrive \\ Enterprise \\ 20 . 169 . 0823 . 0008 \\ OneDriveSetup . exe C :\\ Apps \\ OneDrive \\ Production \\ 21 . 030 . 0211 . 0002 \\ OneDriveSetup . exe C :\\ Apps \\ OneDrive \\ Production \\ 21 . 052 . 0314 . 0001 \\ OneDriveSetup . exe C :\\ Apps \\ OneDrive \\ Insider \\ 21 . 056 . 0318 . 0001 \\ OneDriveSetup . exe Right now, the output path that Save-EvergreenApp builds cannot be customised.","title":"Download installers"},{"location":"save/#parameters","text":"","title":"Parameters"},{"location":"save/#inputobject","text":"The -Name parameter is used to specify the application name to return details for. This is a required parameter. The list of supported applications can be found with Find-EvergreenApp .","title":"InputObject"},{"location":"save/#path","text":"The target directory under which a folder structure will be created and application installers saved into. Typically the target path used will be a path per application.","title":"Path"},{"location":"save/#verbose","text":"The -Verbose parameter can be useful for observing application downloads and save paths, including troubleshooting when the expected application details are not returned. When using the -Verbose parameter, Invoke-WebRequest will show download progress which significantly impacts download speed. To suppress download progress, add the -NoProgress switch parameter as well.","title":"Verbose"},{"location":"save/#-noprogress","text":"Save-EvergreenApp uses Invoke-WebRequest to download target application installers. Download progress is suppressed by default for faster downloads; however, when -Verbose is used, download progress will be displayed. Use -NoProgress with -Verbose to suppress download progress while also displaying verbose output.","title":"-NoProgress"},{"location":"save/#-force","text":"Forces this function to download the target application installers from the URI property even if they already exist in the target directory.","title":"-Force"},{"location":"save/#alias","text":"Save-EvergreenApp has an alias of sea to simplify downloading applications, for example: PS / Users / aaron > gea Slack | sea -Path / Users / aaron / Temp / Slack","title":"Alias"},{"location":"under/","text":"Under the hood \u00b6 Evergreen is a self-contained PowerShell module, that once installed does not require access to any additional content other than official vendor sources used to retrieve details for a specified application. Due to Evergreen's approach to finding the latest version and download URL for an application, custom code is required for most applications. While some applications have a common source location such as GitHub (that provides an API for releases), most applications require querying an application specific API or site to return details for that application. Module structure \u00b6 Evergreen includes the following directory structure: <ModuleBase>/Public - public functions including Get-EvergreenApp , Find-EvergreenApp and Save-EvergreenApp <ModuleBase>/Apps - internal per-application functions that contain the logic for retrieving application details. These are often unique for each application <ModuleBase>/Manifests - each application includes a manifest in JSON format that includes application specific details used by the per-application functions. These describe details of the application including URLs used to determine the latest version of the application <ModuleBase>/Private - internal functions containing reusable code Public \u00b6 The Public folder includes all functions exported from Evergreen: Get-EvergreenApp Find-EvergreenApp Save-EvergreenApp Export-EvergreenManifest Apps \u00b6 The Apps folder includes application specific functions that do the hard work of determining details for the target application. For example, Get-MicrosoftEdge queries the official Edge versions list hosted at https://edgeupdates.microsoft.com/api/products . This allows the function to use the same process that Edge itself uses to determine the latest version of Edge and the URL to download the installer. When using Get-EvergreenApp -Name MicrosoftEdge , Get-EvergreenApp calls Get-MicrosoftEdge and passes the result back to the pipeline. While most functions includes code unique to that application, several applications use GitHub or SourceForge as a source to determine application versions and updates thus these functions can use more shared code than other functions. Manifests \u00b6 Each application includes a manifest file in JSON format that includes details that are used by the internal application function when retrieving the application version and download URI. The manifest structure includes three primary properties - Name (the vendor and application name), Source (a link to an official site), and Get , which defines items such as the URL used to find the application updates. The base manifest structure will look similar to the following: { \"Name\" : \"Vendor Application name\" , \"Source\" : \"https://www.vendorwebsite.com/product\" , \"Get\" : { \"Update\" : { \"Uri\" : \"https://update.vendorwebsite.com/api/product\" } }, \"Install\" : { \"Setup\" : \"AppSetup*.exe\" , \"Physical\" : { \"Arguments\" : \"\" , \"PostInstall\" : [] }, \"Virtual\" : { \"Arguments\" : \"\" , \"PostInstall\" : [] } } } Additionally, each manifest defines the property Install that includes details about installing the application; however, note that while this is included for many applications, this isn't intended to provide a definitive construct for installing applications. Private \u00b6 The Private folder includes re-usable code, used by many of the application functions. Several key functions include: Get-GitHubRepoRelease - returns releases from a target GitHub repository Get-SourceForgeRepoRelease - returns releases from a target SourceForge repository Invoke-RestMethodWrapper - provides logic around Invoke-RestMethod to return content from an update API Invoke-WebRequestWrapper - provides logic around Invoke-WebRequest to return the content from a target URI","title":"Under the hood"},{"location":"under/#under-the-hood","text":"Evergreen is a self-contained PowerShell module, that once installed does not require access to any additional content other than official vendor sources used to retrieve details for a specified application. Due to Evergreen's approach to finding the latest version and download URL for an application, custom code is required for most applications. While some applications have a common source location such as GitHub (that provides an API for releases), most applications require querying an application specific API or site to return details for that application.","title":"Under the hood"},{"location":"under/#module-structure","text":"Evergreen includes the following directory structure: <ModuleBase>/Public - public functions including Get-EvergreenApp , Find-EvergreenApp and Save-EvergreenApp <ModuleBase>/Apps - internal per-application functions that contain the logic for retrieving application details. These are often unique for each application <ModuleBase>/Manifests - each application includes a manifest in JSON format that includes application specific details used by the per-application functions. These describe details of the application including URLs used to determine the latest version of the application <ModuleBase>/Private - internal functions containing reusable code","title":"Module structure"},{"location":"under/#public","text":"The Public folder includes all functions exported from Evergreen: Get-EvergreenApp Find-EvergreenApp Save-EvergreenApp Export-EvergreenManifest","title":"Public"},{"location":"under/#apps","text":"The Apps folder includes application specific functions that do the hard work of determining details for the target application. For example, Get-MicrosoftEdge queries the official Edge versions list hosted at https://edgeupdates.microsoft.com/api/products . This allows the function to use the same process that Edge itself uses to determine the latest version of Edge and the URL to download the installer. When using Get-EvergreenApp -Name MicrosoftEdge , Get-EvergreenApp calls Get-MicrosoftEdge and passes the result back to the pipeline. While most functions includes code unique to that application, several applications use GitHub or SourceForge as a source to determine application versions and updates thus these functions can use more shared code than other functions.","title":"Apps"},{"location":"under/#manifests","text":"Each application includes a manifest file in JSON format that includes details that are used by the internal application function when retrieving the application version and download URI. The manifest structure includes three primary properties - Name (the vendor and application name), Source (a link to an official site), and Get , which defines items such as the URL used to find the application updates. The base manifest structure will look similar to the following: { \"Name\" : \"Vendor Application name\" , \"Source\" : \"https://www.vendorwebsite.com/product\" , \"Get\" : { \"Update\" : { \"Uri\" : \"https://update.vendorwebsite.com/api/product\" } }, \"Install\" : { \"Setup\" : \"AppSetup*.exe\" , \"Physical\" : { \"Arguments\" : \"\" , \"PostInstall\" : [] }, \"Virtual\" : { \"Arguments\" : \"\" , \"PostInstall\" : [] } } } Additionally, each manifest defines the property Install that includes details about installing the application; however, note that while this is included for many applications, this isn't intended to provide a definitive construct for installing applications.","title":"Manifests"},{"location":"under/#private","text":"The Private folder includes re-usable code, used by many of the application functions. Several key functions include: Get-GitHubRepoRelease - returns releases from a target GitHub repository Get-SourceForgeRepoRelease - returns releases from a target SourceForge repository Invoke-RestMethodWrapper - provides logic around Invoke-RestMethod to return content from an update API Invoke-WebRequestWrapper - provides logic around Invoke-WebRequest to return the content from a target URI","title":"Private"},{"location":"use/","text":"Using Evergreen \u00b6 Get-EvergreenApp is used to return application details by specifying an application with the -Name parameter. For example, let's find the latest version of the Microsoft FSLogix Apps agent: Get-EvergreenApp -Name \"MicrosoftFSLogixApps\" This will return output similar to the following that lists the version number and download URL for the application. This application output also includes the release date: Version : 2 . 9 . 7654 . 46150 Date : 9 / 1 / 2021 12 : 54 : 48 am URI : https :// download . microsoft . com / download / 4 / 8 / 2 / 4828e1c7 - 176a - 45bf-bc6b-cce0f54ce04c / FSLogix_Apps_2 . 9 . 7654 . 46150 . zip All output properties are strings that can be acted on with other functions and cmdlets including filtering the output with Where-Object . Output \u00b6 Each Evergreen application returns at least two properties in the object is sends to the pipeline: Version - a string property that is the version number of the application. If you need these in a version format, cast them with [System.Version] URI - a string property that is the download location for the latest version of the application. These will be publicly available locations that provide installers in typically Windows installer formats, e.g., exe , msi . Some downloads may be in other formats, such as zip that will need to be extracted before install Several applications may include additional properties in their output, which will often require filtering, including: Architecture - the processor architecture of the installer Type - an application may return installer downloads in exe , msi , zip , format etc. In some instances, Type may return slightly different data Ring , Channel , and/or Release - some applications include different release rings or channels for enterprise use. The value of this property is often unique to that application Language - some application installers may support specific languages Date - in some cases, Evergreen can return the release date of the returned version Filter Output \u00b6 Where an application returns more than one object to the pipeline, you will need to filter the output with Where-Object or Sort-Object . For example, Get-EvergreenApp -Name MicrosoftTeams returns both the 32-bit and 64-bit versions of the General and Preview release rings ot the Microsoft Teams installer. As most environments should be on 64-bit Windows these days, we can filter the 64-bit version of Teams with: Get-EvergreenApp -Name \"MicrosoftTeams\" | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Ring -eq \"General\" } This will return details of the 64-bit Microsoft Teams installer that we can use in a script. Version : 1 . 3 . 00 . 34662 Architecture : x64 URI : https :// statics . teams . cdn . office . net / production-windows-x64 / 1 . 3 . 00 . 34662 / Teams_windows_x64 . msi Use Output \u00b6 With the filtered output we can download the latest version of Microsoft Teams before copying it to a target location or installing it directly to the current system. The following commands filters Get-EvergreenApp -Name MicrosoftTeams to get the latest version and download, then grabs the Teams_windows_x64.msi filename from the URI property with Split-Path , downloads the file locally with Invoke-WebRequest and finally uses msiexec to install Teams: $Teams = Get-EvergreenApp -Name MicrosoftTeams | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Ring -eq \"General\" } $TeamsInstaller = Split-Path -Path $Teams . Uri -Leaf Invoke-WebRequest -Uri $Teams . Uri -OutFile \".\\$TeamsInstaller\" -UseBasicParsing & \"$env:SystemRoot\\System32\\msiexec.exe\" \"/package $TeamsInstaller ALLUSERS=1 /quiet\" Parameters \u00b6 Name \u00b6 The -Name parameter is used to specify the application name to return details for. This is a required parameter. The list of supported applications can be found with Find-EvergreenApp . Verbose \u00b6 The -Verbose parameter can be useful for observing where the application details are obtained from (e.g. the application update URL) and for troubleshooting when the expected application details are not returned. Alias \u00b6 Get-EvergreenApp has an alias of gea to simplify retrieving application details, for example: PS / Users / aaron > gea Slack Version : 4 . 14 . 0 Platform : PerMachine Architecture : x64 URI : https :// downloads . slack-edge . com / releases / windows / 4 . 14 . 0 / prod / x64 / slack-standalone - 4 . 14 . 0 . 0 . msi","title":"Using Evergreen"},{"location":"use/#using-evergreen","text":"Get-EvergreenApp is used to return application details by specifying an application with the -Name parameter. For example, let's find the latest version of the Microsoft FSLogix Apps agent: Get-EvergreenApp -Name \"MicrosoftFSLogixApps\" This will return output similar to the following that lists the version number and download URL for the application. This application output also includes the release date: Version : 2 . 9 . 7654 . 46150 Date : 9 / 1 / 2021 12 : 54 : 48 am URI : https :// download . microsoft . com / download / 4 / 8 / 2 / 4828e1c7 - 176a - 45bf-bc6b-cce0f54ce04c / FSLogix_Apps_2 . 9 . 7654 . 46150 . zip All output properties are strings that can be acted on with other functions and cmdlets including filtering the output with Where-Object .","title":"Using Evergreen"},{"location":"use/#output","text":"Each Evergreen application returns at least two properties in the object is sends to the pipeline: Version - a string property that is the version number of the application. If you need these in a version format, cast them with [System.Version] URI - a string property that is the download location for the latest version of the application. These will be publicly available locations that provide installers in typically Windows installer formats, e.g., exe , msi . Some downloads may be in other formats, such as zip that will need to be extracted before install Several applications may include additional properties in their output, which will often require filtering, including: Architecture - the processor architecture of the installer Type - an application may return installer downloads in exe , msi , zip , format etc. In some instances, Type may return slightly different data Ring , Channel , and/or Release - some applications include different release rings or channels for enterprise use. The value of this property is often unique to that application Language - some application installers may support specific languages Date - in some cases, Evergreen can return the release date of the returned version","title":"Output"},{"location":"use/#filter-output","text":"Where an application returns more than one object to the pipeline, you will need to filter the output with Where-Object or Sort-Object . For example, Get-EvergreenApp -Name MicrosoftTeams returns both the 32-bit and 64-bit versions of the General and Preview release rings ot the Microsoft Teams installer. As most environments should be on 64-bit Windows these days, we can filter the 64-bit version of Teams with: Get-EvergreenApp -Name \"MicrosoftTeams\" | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Ring -eq \"General\" } This will return details of the 64-bit Microsoft Teams installer that we can use in a script. Version : 1 . 3 . 00 . 34662 Architecture : x64 URI : https :// statics . teams . cdn . office . net / production-windows-x64 / 1 . 3 . 00 . 34662 / Teams_windows_x64 . msi","title":"Filter Output"},{"location":"use/#use-output","text":"With the filtered output we can download the latest version of Microsoft Teams before copying it to a target location or installing it directly to the current system. The following commands filters Get-EvergreenApp -Name MicrosoftTeams to get the latest version and download, then grabs the Teams_windows_x64.msi filename from the URI property with Split-Path , downloads the file locally with Invoke-WebRequest and finally uses msiexec to install Teams: $Teams = Get-EvergreenApp -Name MicrosoftTeams | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Ring -eq \"General\" } $TeamsInstaller = Split-Path -Path $Teams . Uri -Leaf Invoke-WebRequest -Uri $Teams . Uri -OutFile \".\\$TeamsInstaller\" -UseBasicParsing & \"$env:SystemRoot\\System32\\msiexec.exe\" \"/package $TeamsInstaller ALLUSERS=1 /quiet\"","title":"Use Output"},{"location":"use/#parameters","text":"","title":"Parameters"},{"location":"use/#name","text":"The -Name parameter is used to specify the application name to return details for. This is a required parameter. The list of supported applications can be found with Find-EvergreenApp .","title":"Name"},{"location":"use/#verbose","text":"The -Verbose parameter can be useful for observing where the application details are obtained from (e.g. the application update URL) and for troubleshooting when the expected application details are not returned.","title":"Verbose"},{"location":"use/#alias","text":"Get-EvergreenApp has an alias of gea to simplify retrieving application details, for example: PS / Users / aaron > gea Slack Version : 4 . 14 . 0 Platform : PerMachine Architecture : x64 URI : https :// downloads . slack-edge . com / releases / windows / 4 . 14 . 0 / prod / x64 / slack-standalone - 4 . 14 . 0 . 0 . msi","title":"Alias"},{"location":"help/en-US/Export-EvergreenManifest/","text":"Export-EvergreenManifest \u00b6 SYNOPSIS \u00b6 Exports an Evergreen application JSON manifest as a hashtable. SYNTAX \u00b6 Export-EvergreenManifest [-Name] <String> [<CommonParameters>] DESCRIPTION \u00b6 Exports an Evergreen application JSON manifest as a hashtable that can be used for various functions including scripting or saving to an external file. EXAMPLES \u00b6 EXAMPLE 1 \u00b6 Export-EvergreenManifest -Name \"MicrosoftEdge\" Description: Exports the application manifest for the application \"MicrosoftEdge\". PARAMETERS \u00b6 -Name \u00b6 The application name to return details for. The list of supported applications can be found with Find-EvergreenApp . Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS \u00b6 System.String \u00b6 OUTPUTS \u00b6 System.Management.Automation.PSObject \u00b6 NOTES \u00b6 Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy RELATED LINKS \u00b6 Getting started with Evergreen:","title":"Export-EvergreenManifest"},{"location":"help/en-US/Export-EvergreenManifest/#export-evergreenmanifest","text":"","title":"Export-EvergreenManifest"},{"location":"help/en-US/Export-EvergreenManifest/#synopsis","text":"Exports an Evergreen application JSON manifest as a hashtable.","title":"SYNOPSIS"},{"location":"help/en-US/Export-EvergreenManifest/#syntax","text":"Export-EvergreenManifest [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"help/en-US/Export-EvergreenManifest/#description","text":"Exports an Evergreen application JSON manifest as a hashtable that can be used for various functions including scripting or saving to an external file.","title":"DESCRIPTION"},{"location":"help/en-US/Export-EvergreenManifest/#examples","text":"","title":"EXAMPLES"},{"location":"help/en-US/Export-EvergreenManifest/#example-1","text":"Export-EvergreenManifest -Name \"MicrosoftEdge\" Description: Exports the application manifest for the application \"MicrosoftEdge\".","title":"EXAMPLE 1"},{"location":"help/en-US/Export-EvergreenManifest/#parameters","text":"","title":"PARAMETERS"},{"location":"help/en-US/Export-EvergreenManifest/#-name","text":"The application name to return details for. The list of supported applications can be found with Find-EvergreenApp . Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"help/en-US/Export-EvergreenManifest/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"help/en-US/Export-EvergreenManifest/#inputs","text":"","title":"INPUTS"},{"location":"help/en-US/Export-EvergreenManifest/#systemstring","text":"","title":"System.String"},{"location":"help/en-US/Export-EvergreenManifest/#outputs","text":"","title":"OUTPUTS"},{"location":"help/en-US/Export-EvergreenManifest/#systemmanagementautomationpsobject","text":"","title":"System.Management.Automation.PSObject"},{"location":"help/en-US/Export-EvergreenManifest/#notes","text":"Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy","title":"NOTES"},{"location":"help/en-US/Export-EvergreenManifest/#related-links","text":"Getting started with Evergreen:","title":"RELATED LINKS"},{"location":"help/en-US/Find-EvergreenApp/","text":"Find-EvergreenApp \u00b6 SYNOPSIS \u00b6 Outputs a table with the applications that Evergreen supports. SYNTAX \u00b6 Find-EvergreenApp [[-Name] <String>] [<CommonParameters>] DESCRIPTION \u00b6 Returns a table built from the internal application manifests to list the applications supported by Evergreen. The table includes the Name (the internal name used when querying for the application via Get-EvergreenApp ), Application (typically the full vendor and application name) and Link (a URL hosting official vendor information about the application) properties. EXAMPLES \u00b6 EXAMPLE 1 \u00b6 Find-EvergreenApp Description: Returns a table with the all of the currently supported applications. EXAMPLE 2 \u00b6 Find-EvergreenApp -Name \"Edge\" Description: Returns a table with the all of the currently supported applications that match \"Edge\". EXAMPLE 3 \u00b6 Find-EvergreenApp -Name \"Microsoft\" Description: Returns a table with the all of the currently supported applications that match \"Microsoft\". PARAMETERS \u00b6 -Name \u00b6 The application name to return details for. This can be the entire application name or a portion thereof. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS \u00b6 System.String \u00b6 OUTPUTS \u00b6 System.Management.Automation.PSObject \u00b6 NOTES \u00b6 Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy RELATED LINKS \u00b6 Find supported applications:","title":"Find-EvergreenApp"},{"location":"help/en-US/Find-EvergreenApp/#find-evergreenapp","text":"","title":"Find-EvergreenApp"},{"location":"help/en-US/Find-EvergreenApp/#synopsis","text":"Outputs a table with the applications that Evergreen supports.","title":"SYNOPSIS"},{"location":"help/en-US/Find-EvergreenApp/#syntax","text":"Find-EvergreenApp [[-Name] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"help/en-US/Find-EvergreenApp/#description","text":"Returns a table built from the internal application manifests to list the applications supported by Evergreen. The table includes the Name (the internal name used when querying for the application via Get-EvergreenApp ), Application (typically the full vendor and application name) and Link (a URL hosting official vendor information about the application) properties.","title":"DESCRIPTION"},{"location":"help/en-US/Find-EvergreenApp/#examples","text":"","title":"EXAMPLES"},{"location":"help/en-US/Find-EvergreenApp/#example-1","text":"Find-EvergreenApp Description: Returns a table with the all of the currently supported applications.","title":"EXAMPLE 1"},{"location":"help/en-US/Find-EvergreenApp/#example-2","text":"Find-EvergreenApp -Name \"Edge\" Description: Returns a table with the all of the currently supported applications that match \"Edge\".","title":"EXAMPLE 2"},{"location":"help/en-US/Find-EvergreenApp/#example-3","text":"Find-EvergreenApp -Name \"Microsoft\" Description: Returns a table with the all of the currently supported applications that match \"Microsoft\".","title":"EXAMPLE 3"},{"location":"help/en-US/Find-EvergreenApp/#parameters","text":"","title":"PARAMETERS"},{"location":"help/en-US/Find-EvergreenApp/#-name","text":"The application name to return details for. This can be the entire application name or a portion thereof. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Name"},{"location":"help/en-US/Find-EvergreenApp/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"help/en-US/Find-EvergreenApp/#inputs","text":"","title":"INPUTS"},{"location":"help/en-US/Find-EvergreenApp/#systemstring","text":"","title":"System.String"},{"location":"help/en-US/Find-EvergreenApp/#outputs","text":"","title":"OUTPUTS"},{"location":"help/en-US/Find-EvergreenApp/#systemmanagementautomationpsobject","text":"","title":"System.Management.Automation.PSObject"},{"location":"help/en-US/Find-EvergreenApp/#notes","text":"Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy","title":"NOTES"},{"location":"help/en-US/Find-EvergreenApp/#related-links","text":"Find supported applications:","title":"RELATED LINKS"},{"location":"help/en-US/Get-EvergreenApp/","text":"Get-EvergreenApp \u00b6 SYNOPSIS \u00b6 Returns the latest version and download URL/s for an application supported by the Evergreen module. SYNTAX \u00b6 Get-EvergreenApp [-Name] <String> [<CommonParameters>] DESCRIPTION \u00b6 Queries the internal application functions and manifests included in the module to find the latest version and download link/s for the specified application. The output from this function can be passed to Where-Object to filter for a specific download based on properties including processor architecture, file type or other properties. Get-EvergreenApp uses official vendor sites including update APIs, web queries, and code repository locations to return details of a target application at run time. EXAMPLES \u00b6 EXAMPLE 1 \u00b6 Get-EvergreenApp -Name \"MicrosoftEdge\" Version : 89 . 0 . 774 . 76 Platform : Windows Channel : Stable Release : Enterprise Architecture : x64 Date : 12 / 4 / 2021 Hash : 9E7A29B4BE6E1CD707F80B4B79008F19D2D5DD5C774D317A493EC6DE5BE0B7D7 URI : https :// msedge . sf . dl . delivery . mp . microsoft . com / filestreamingservice / files / 4d12f620 - 174c - 4259 - 85e6 - 8a80ea45ff10 / MicrosoftEdgeEnterpriseX64 . msi Description: Returns the current version and download URLs for Microsoft Edge using the official Microsoft Edge update API at https://edgeupdates.microsoft.com/api/products . EXAMPLE 2 \u00b6 Get-EvergreenApp -Name \"MicrosoftEdge\" | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Channel -eq \"Stable\" -and $_ . Release -eq \"Enterprise\" } Description: Returns the current version and download URL for the Stable channel of the 64-bit Enterprise ring of Microsoft Edge. EXAMPLE 3 \u00b6 ( Get-EvergreenApp -Name \"MicrosoftOneDrive\" | Where-Object { $_ . Type -eq \"Exe\" -and $_ . Ring -eq \"Production\" }) | ` Sort-Object -Property @{ Expression = { [System.Version] $_ . Version }; Descending = $true } | Select-Object -First 1 Description: Returns the current version and download URL for the Production ring of Microsoft OneDrive and selects the latest version in the event that more that one release is returned. EXAMPLE 4 \u00b6 Get-EvergreenApp -Name \"AdobeAcrobatReaderDC\" | Where-Object { $_ . Language -eq \"English\" -and $_ . Architecture -eq \"x86\" } Description: Returns the current version and download URL that matches the English language, 32-bit release of Adobe Acrobat Reader DC. EXAMPLE 5 \u00b6 Find-EvergreenApp -Name \"Teams\" | Get-EvergreenApp Description: Lists the available applications matching the string \"Teams\" (for example, Microsoft Teams), and passes the output to Get-EvergreenApp , which will query the matching application name. Note that Get-EvergreenApp will only process the first application returned on the pipeline and not all multiple matching applications. EXAMPLE 6 \u00b6 Get-EvergreenApp -Name \"MicrosoftTeams\" | Save-EvergreenApp -Path \"C:\\Apps\\Teams\" Description: Get-EvergreenApp returns the details for the latest version of Microsoft Teams which is passed via the pipeline to Save-EvergreenApp . The output is used to save the target URLs to C:\\Apps\\Teams using a folder structure based on the returned object. In this case, the Ring and Architecture properties of the returned object will be used in the folder structure. PARAMETERS \u00b6 -Name \u00b6 The application name to return details for. The list of supported applications can be found with Find-EvergreenApp . Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS \u00b6 System.String \u00b6 OUTPUTS \u00b6 System.Management.Automation.PSObject \u00b6 NOTES \u00b6 Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy RELATED LINKS \u00b6 Use Evergreen:","title":"Get-EvergreenApp"},{"location":"help/en-US/Get-EvergreenApp/#get-evergreenapp","text":"","title":"Get-EvergreenApp"},{"location":"help/en-US/Get-EvergreenApp/#synopsis","text":"Returns the latest version and download URL/s for an application supported by the Evergreen module.","title":"SYNOPSIS"},{"location":"help/en-US/Get-EvergreenApp/#syntax","text":"Get-EvergreenApp [-Name] <String> [<CommonParameters>]","title":"SYNTAX"},{"location":"help/en-US/Get-EvergreenApp/#description","text":"Queries the internal application functions and manifests included in the module to find the latest version and download link/s for the specified application. The output from this function can be passed to Where-Object to filter for a specific download based on properties including processor architecture, file type or other properties. Get-EvergreenApp uses official vendor sites including update APIs, web queries, and code repository locations to return details of a target application at run time.","title":"DESCRIPTION"},{"location":"help/en-US/Get-EvergreenApp/#examples","text":"","title":"EXAMPLES"},{"location":"help/en-US/Get-EvergreenApp/#example-1","text":"Get-EvergreenApp -Name \"MicrosoftEdge\" Version : 89 . 0 . 774 . 76 Platform : Windows Channel : Stable Release : Enterprise Architecture : x64 Date : 12 / 4 / 2021 Hash : 9E7A29B4BE6E1CD707F80B4B79008F19D2D5DD5C774D317A493EC6DE5BE0B7D7 URI : https :// msedge . sf . dl . delivery . mp . microsoft . com / filestreamingservice / files / 4d12f620 - 174c - 4259 - 85e6 - 8a80ea45ff10 / MicrosoftEdgeEnterpriseX64 . msi Description: Returns the current version and download URLs for Microsoft Edge using the official Microsoft Edge update API at https://edgeupdates.microsoft.com/api/products .","title":"EXAMPLE 1"},{"location":"help/en-US/Get-EvergreenApp/#example-2","text":"Get-EvergreenApp -Name \"MicrosoftEdge\" | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Channel -eq \"Stable\" -and $_ . Release -eq \"Enterprise\" } Description: Returns the current version and download URL for the Stable channel of the 64-bit Enterprise ring of Microsoft Edge.","title":"EXAMPLE 2"},{"location":"help/en-US/Get-EvergreenApp/#example-3","text":"( Get-EvergreenApp -Name \"MicrosoftOneDrive\" | Where-Object { $_ . Type -eq \"Exe\" -and $_ . Ring -eq \"Production\" }) | ` Sort-Object -Property @{ Expression = { [System.Version] $_ . Version }; Descending = $true } | Select-Object -First 1 Description: Returns the current version and download URL for the Production ring of Microsoft OneDrive and selects the latest version in the event that more that one release is returned.","title":"EXAMPLE 3"},{"location":"help/en-US/Get-EvergreenApp/#example-4","text":"Get-EvergreenApp -Name \"AdobeAcrobatReaderDC\" | Where-Object { $_ . Language -eq \"English\" -and $_ . Architecture -eq \"x86\" } Description: Returns the current version and download URL that matches the English language, 32-bit release of Adobe Acrobat Reader DC.","title":"EXAMPLE 4"},{"location":"help/en-US/Get-EvergreenApp/#example-5","text":"Find-EvergreenApp -Name \"Teams\" | Get-EvergreenApp Description: Lists the available applications matching the string \"Teams\" (for example, Microsoft Teams), and passes the output to Get-EvergreenApp , which will query the matching application name. Note that Get-EvergreenApp will only process the first application returned on the pipeline and not all multiple matching applications.","title":"EXAMPLE 5"},{"location":"help/en-US/Get-EvergreenApp/#example-6","text":"Get-EvergreenApp -Name \"MicrosoftTeams\" | Save-EvergreenApp -Path \"C:\\Apps\\Teams\" Description: Get-EvergreenApp returns the details for the latest version of Microsoft Teams which is passed via the pipeline to Save-EvergreenApp . The output is used to save the target URLs to C:\\Apps\\Teams using a folder structure based on the returned object. In this case, the Ring and Architecture properties of the returned object will be used in the folder structure.","title":"EXAMPLE 6"},{"location":"help/en-US/Get-EvergreenApp/#parameters","text":"","title":"PARAMETERS"},{"location":"help/en-US/Get-EvergreenApp/#-name","text":"The application name to return details for. The list of supported applications can be found with Find-EvergreenApp . Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False","title":"-Name"},{"location":"help/en-US/Get-EvergreenApp/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"help/en-US/Get-EvergreenApp/#inputs","text":"","title":"INPUTS"},{"location":"help/en-US/Get-EvergreenApp/#systemstring","text":"","title":"System.String"},{"location":"help/en-US/Get-EvergreenApp/#outputs","text":"","title":"OUTPUTS"},{"location":"help/en-US/Get-EvergreenApp/#systemmanagementautomationpsobject","text":"","title":"System.Management.Automation.PSObject"},{"location":"help/en-US/Get-EvergreenApp/#notes","text":"Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy","title":"NOTES"},{"location":"help/en-US/Get-EvergreenApp/#related-links","text":"Use Evergreen:","title":"RELATED LINKS"},{"location":"help/en-US/Save-EvergreenApp/","text":"Save-EvergreenApp \u00b6 SYNOPSIS \u00b6 Downloads target URIs passed to this function from Get-EvergreenApp into a folder structure. SYNTAX \u00b6 Save-EvergreenApp [-InputObject] <PSObject> [[-Path] <String>] [[-Proxy] <String>] [[-ProxyCredential] <PSCredential>] [-Force] [-NoProgress] [-WhatIf] [-Confirm] [<CommonParameters>] DESCRIPTION \u00b6 Saves target URLs passed to this function from Get-EvergreenApp output to into a folder structure below -Path using the properties from the object passed to the function. Get-EvergreenApp will return an object that may include application properties including (in the following order) - Product, Track, Channel, Release, Ring, Version, Language, and (processor) Architecture. Only properties that exist on the target object will be used. This simplifies saving the target application installers or updaters into a consistent folder structure without having to build the target folder structure yourself or deal with other functions to download the file. EXAMPLES \u00b6 EXAMPLE 1 \u00b6 Get-EvergreenApp -Name \"AdobeAcrobat\" | Save-EvergreenApp -Path \"C:\\Temp\\Adobe\" Description: Downloads all of the URIs returned by Get-AdobeAcrobat to a folder structure below C:\\Temp\\Adobe\\ . PARAMETERS \u00b6 -InputObject \u00b6 Save-EvergreenApp accepts the PSObject from Get-EvergreenApp . Save-EvergreenApp will test for the existence of at least these properties - Version and URI. Type : PSObject Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Path \u00b6 The target directory under which a folder structure will be created and application installers saved into. Typically the target path used will be a path per application. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : (Resolve-Path -Path $PWD) Accept pipeline input : False Accept wildcard characters : False -Proxy \u00b6 Specifies a proxy server for the request, rather than connecting directly to the internet resource. Enter the URI of a network proxy server. Note - this is experimental support for proxies. Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -ProxyCredential \u00b6 Specifies a user account that has permission to use the proxy server that is specified by the Proxy parameter. The default is the current user. Type a user name, such as User01 or Domain01\\User01, User@Domain.Com , or enter a PSCredential object, such as one generated by the Get-Credential cmdlet . This parameter is valid only when the Proxy parameter is also used in the command. Note - this is experimental support for proxies. Type : PSCredential Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : [ System.Management.Automation.PSCredential ] ::Empty Accept pipeline input : False Accept wildcard characters : False -NoProgress \u00b6 Save-EvergreenApp uses Invoke-WebRequest to download target application installers. Download progress is suppressed by default for faster downloads; however, when -Verbose is used, download progress will be displayed. Use -NoProgress with -Verbose to suppress download progress while also displaying verbose output. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -WhatIf \u00b6 Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Confirm \u00b6 Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Force \u00b6 Forces this function to download the target application installers from the URI property even if they already exist in the target directory. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS \u00b6 System.Management.Automation.PSObject \u00b6 Save-EvergreenApp accepts the output from Get-EvergreenApp. OUTPUTS \u00b6 System.Management.Automation.PSObject \u00b6 Provides a list of paths of the downloaded target files. NOTES \u00b6 Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy RELATED LINKS \u00b6 Download application installers:","title":"Save-EvergreenApp"},{"location":"help/en-US/Save-EvergreenApp/#save-evergreenapp","text":"","title":"Save-EvergreenApp"},{"location":"help/en-US/Save-EvergreenApp/#synopsis","text":"Downloads target URIs passed to this function from Get-EvergreenApp into a folder structure.","title":"SYNOPSIS"},{"location":"help/en-US/Save-EvergreenApp/#syntax","text":"Save-EvergreenApp [-InputObject] <PSObject> [[-Path] <String>] [[-Proxy] <String>] [[-ProxyCredential] <PSCredential>] [-Force] [-NoProgress] [-WhatIf] [-Confirm] [<CommonParameters>]","title":"SYNTAX"},{"location":"help/en-US/Save-EvergreenApp/#description","text":"Saves target URLs passed to this function from Get-EvergreenApp output to into a folder structure below -Path using the properties from the object passed to the function. Get-EvergreenApp will return an object that may include application properties including (in the following order) - Product, Track, Channel, Release, Ring, Version, Language, and (processor) Architecture. Only properties that exist on the target object will be used. This simplifies saving the target application installers or updaters into a consistent folder structure without having to build the target folder structure yourself or deal with other functions to download the file.","title":"DESCRIPTION"},{"location":"help/en-US/Save-EvergreenApp/#examples","text":"","title":"EXAMPLES"},{"location":"help/en-US/Save-EvergreenApp/#example-1","text":"Get-EvergreenApp -Name \"AdobeAcrobat\" | Save-EvergreenApp -Path \"C:\\Temp\\Adobe\" Description: Downloads all of the URIs returned by Get-AdobeAcrobat to a folder structure below C:\\Temp\\Adobe\\ .","title":"EXAMPLE 1"},{"location":"help/en-US/Save-EvergreenApp/#parameters","text":"","title":"PARAMETERS"},{"location":"help/en-US/Save-EvergreenApp/#-inputobject","text":"Save-EvergreenApp accepts the PSObject from Get-EvergreenApp . Save-EvergreenApp will test for the existence of at least these properties - Version and URI. Type : PSObject Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-InputObject"},{"location":"help/en-US/Save-EvergreenApp/#-path","text":"The target directory under which a folder structure will be created and application installers saved into. Typically the target path used will be a path per application. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : (Resolve-Path -Path $PWD) Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"help/en-US/Save-EvergreenApp/#-proxy","text":"Specifies a proxy server for the request, rather than connecting directly to the internet resource. Enter the URI of a network proxy server. Note - this is experimental support for proxies. Type : String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Proxy"},{"location":"help/en-US/Save-EvergreenApp/#-proxycredential","text":"Specifies a user account that has permission to use the proxy server that is specified by the Proxy parameter. The default is the current user. Type a user name, such as User01 or Domain01\\User01, User@Domain.Com , or enter a PSCredential object, such as one generated by the Get-Credential cmdlet . This parameter is valid only when the Proxy parameter is also used in the command. Note - this is experimental support for proxies. Type : PSCredential Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : [ System.Management.Automation.PSCredential ] ::Empty Accept pipeline input : False Accept wildcard characters : False","title":"-ProxyCredential"},{"location":"help/en-US/Save-EvergreenApp/#-noprogress","text":"Save-EvergreenApp uses Invoke-WebRequest to download target application installers. Download progress is suppressed by default for faster downloads; however, when -Verbose is used, download progress will be displayed. Use -NoProgress with -Verbose to suppress download progress while also displaying verbose output. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-NoProgress"},{"location":"help/en-US/Save-EvergreenApp/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-WhatIf"},{"location":"help/en-US/Save-EvergreenApp/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Confirm"},{"location":"help/en-US/Save-EvergreenApp/#-force","text":"Forces this function to download the target application installers from the URI property even if they already exist in the target directory. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Force"},{"location":"help/en-US/Save-EvergreenApp/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"help/en-US/Save-EvergreenApp/#inputs","text":"","title":"INPUTS"},{"location":"help/en-US/Save-EvergreenApp/#systemmanagementautomationpsobject","text":"Save-EvergreenApp accepts the output from Get-EvergreenApp.","title":"System.Management.Automation.PSObject"},{"location":"help/en-US/Save-EvergreenApp/#outputs","text":"","title":"OUTPUTS"},{"location":"help/en-US/Save-EvergreenApp/#systemmanagementautomationpsobject_1","text":"Provides a list of paths of the downloaded target files.","title":"System.Management.Automation.PSObject"},{"location":"help/en-US/Save-EvergreenApp/#notes","text":"Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy","title":"NOTES"},{"location":"help/en-US/Save-EvergreenApp/#related-links","text":"Download application installers:","title":"RELATED LINKS"},{"location":"help/en-US/about_Evergreen/","text":"Evergreen \u00b6 about_Evergreen \u00b6 SHORT DESCRIPTION \u00b6 Return the latest version and download URLs for a set of common Windows applications. LONG DESCRIPTION \u00b6 Evergreen is a PowerShell module that returns the latest version and download URLs for a set of common Windows applications. The module consists of simple functions to use in scripts when performing several tasks including: Retrieve the latest version of a particular application to comparing against a version already installed or downloaded Return the URL for the latest version of the application to download it for local installation or deployment to target machines Evergreen is intended for use in solutions used to automate software deployments. These solutions could be: Image creation with Hashicorp Packer - images can be created with the latest version of a set of applications Import applications into Microsoft Endpoint Manager - keep Configuration Manager or Microsoft Intune up to date with the latest versions of applications Create a library of application installers - by regularly running Evergreen functions, you can retrieve and download the current version of an application and store it in an application directory structure for later use Submitting manifests to Winget or Chocolatey or similar - Evergreen can return an object with a version number and download URL that can be used to construct manifests for the most recent versions Primary functions in Evergreen are: Get-EvergreenApp - returns details of the latest release of an application including the version number and download URL Save-EvergreenApp - simplifies downloading application URLs returned from Get-EvergreenApp Find-EvergreenApp - lists applications supported by the module","title":"about_Evergreen"},{"location":"help/en-US/about_Evergreen/#evergreen","text":"","title":"Evergreen"},{"location":"help/en-US/about_Evergreen/#about_evergreen","text":"","title":"about_Evergreen"},{"location":"help/en-US/about_Evergreen/#short-description","text":"Return the latest version and download URLs for a set of common Windows applications.","title":"SHORT DESCRIPTION"},{"location":"help/en-US/about_Evergreen/#long-description","text":"Evergreen is a PowerShell module that returns the latest version and download URLs for a set of common Windows applications. The module consists of simple functions to use in scripts when performing several tasks including: Retrieve the latest version of a particular application to comparing against a version already installed or downloaded Return the URL for the latest version of the application to download it for local installation or deployment to target machines Evergreen is intended for use in solutions used to automate software deployments. These solutions could be: Image creation with Hashicorp Packer - images can be created with the latest version of a set of applications Import applications into Microsoft Endpoint Manager - keep Configuration Manager or Microsoft Intune up to date with the latest versions of applications Create a library of application installers - by regularly running Evergreen functions, you can retrieve and download the current version of an application and store it in an application directory structure for later use Submitting manifests to Winget or Chocolatey or similar - Evergreen can return an object with a version number and download URL that can be used to construct manifests for the most recent versions Primary functions in Evergreen are: Get-EvergreenApp - returns details of the latest release of an application including the version number and download URL Save-EvergreenApp - simplifies downloading application URLs returned from Get-EvergreenApp Find-EvergreenApp - lists applications supported by the module","title":"LONG DESCRIPTION"}]}